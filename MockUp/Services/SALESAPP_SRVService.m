/*
 
 Auto-Generated by the SAP NetWeaver Gateway developer tool for Xcode, Version 2.5.300.0
  
 File: SALESAPP_SRVService.h
 Abstract: The generated proxy classes for the SALESAPP_SRV Service. Service Version: 1.  
*/

#import "SALESAPP_SRVService.h"
#import "BaseODataObject.h"
#import "Logger.h"
#import "SDMODataEntitySchema.h"
#import "SDMODataCollection.h"
#import "SDMODataFunctionImport.h"
#import "TypeConverter.h"

#define SALESAPP_SRV_SERVICE_DOCUMENT @"SALESAPP_SRVServiceDocument"
#define SALESAPP_SRV_SERVICE_METADATA @"SALESAPP_SRVServiceMetadata"

#pragma mark - Complex Types


#pragma mark SalesOrderStatus
@implementation SalesOrderStatus 

@synthesize Delivery = m_Delivery;
@synthesize Invoice = m_Invoice;
@synthesize Overall = m_Overall;

static NSMutableDictionary *salesOrderStatusLabels = nil;

+ (void)loadLabels:(NSMutableDictionary *)sdmProperties
{
    salesOrderStatusLabels = [NSMutableDictionary dictionary];
    for (SDMODataPropertyInfo *property in [sdmProperties allValues]) {
        [salesOrderStatusLabels setValue:property.label forKey:property.name];
    }
}

+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:salesOrderStatusLabels forProperty:aPropertyName];
}

- (BOOL)setComplexTypePropertiesToSDMEntry:(SDMODataEntry *)aSDMEntry complexTypePropertyName:(NSString *)aComplexPropertyName error:(NSError * __autoreleasing *)error
{
	BOOL result = [super setComplexTypePropertiesToSDMEntry:aSDMEntry complexTypePropertyName:aComplexPropertyName error:error];
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Delivery forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Delivery"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Invoice forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Invoice"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Overall forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Overall"] error:error]) {
		result = NO;
	}
	
	return result;
}

- (void)loadProperties
{
    [super loadProperties];
	m_Delivery = [self getStringValueForSDMPropertyWithName:@"Delivery"];
	m_Invoice = [self getStringValueForSDMPropertyWithName:@"Invoice"];
	m_Overall = [self getStringValueForSDMPropertyWithName:@"Overall"];
}

@end


#pragma mark - Entity Types


#pragma mark - ContactPerson
@implementation ContactPerson 

@synthesize TelephoneNumber = m_TelephoneNumber;
@synthesize Country = m_Country;
@synthesize Region = m_Region;
@synthesize City = m_City;
@synthesize PostalCode = m_PostalCode;
@synthesize HouseNumber = m_HouseNumber;
@synthesize Street = m_Street;
@synthesize LastName = m_LastName;
@synthesize FirstName = m_FirstName;
@synthesize ContactPersonID = m_ContactPersonID;
@synthesize FaxNumber = m_FaxNumber;
@synthesize Email = m_Email;
@synthesize Url = m_Url;
@synthesize Gender = m_Gender;
@synthesize RelatedPartnerID = m_RelatedPartnerID;
@synthesize Landx50 = m_Landx50;

static NSMutableDictionary *contactPersonLabels = nil;
static SDMODataEntitySchema *contactPersonEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:contactPersonEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.TelephoneNumber forSDMPropertyWithName:@"TelephoneNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Country forSDMPropertyWithName:@"Country" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Region forSDMPropertyWithName:@"Region" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.City forSDMPropertyWithName:@"City" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PostalCode forSDMPropertyWithName:@"PostalCode" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.HouseNumber forSDMPropertyWithName:@"HouseNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Street forSDMPropertyWithName:@"Street" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LastName forSDMPropertyWithName:@"LastName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FirstName forSDMPropertyWithName:@"FirstName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ContactPersonID forSDMPropertyWithName:@"ContactPersonID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FaxNumber forSDMPropertyWithName:@"FaxNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Email forSDMPropertyWithName:@"Email" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Url forSDMPropertyWithName:@"Url" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Gender forSDMPropertyWithName:@"Gender" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.RelatedPartnerID forSDMPropertyWithName:@"RelatedPartnerID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Landx50 forSDMPropertyWithName:@"Landx50" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"ContactPersons" workspaceOfCollection:nil];
    contactPersonEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"ContactPersons" andService:aService];
    	if (properties) {    
	    	contactPersonLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[contactPersonLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:contactPersonLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_TelephoneNumber = [self getStringValueForSDMPropertyWithName:@"TelephoneNumber"];
	m_Country = [self getStringValueForSDMPropertyWithName:@"Country"];
	m_Region = [self getStringValueForSDMPropertyWithName:@"Region"];
	m_City = [self getStringValueForSDMPropertyWithName:@"City"];
	m_PostalCode = [self getStringValueForSDMPropertyWithName:@"PostalCode"];
	m_HouseNumber = [self getStringValueForSDMPropertyWithName:@"HouseNumber"];
	m_Street = [self getStringValueForSDMPropertyWithName:@"Street"];
	m_LastName = [self getStringValueForSDMPropertyWithName:@"LastName"];
	m_FirstName = [self getStringValueForSDMPropertyWithName:@"FirstName"];
	m_ContactPersonID = [self getStringValueForSDMPropertyWithName:@"ContactPersonID"];
	m_FaxNumber = [self getStringValueForSDMPropertyWithName:@"FaxNumber"];
	m_Email = [self getStringValueForSDMPropertyWithName:@"Email"];
	m_Url = [self getStringValueForSDMPropertyWithName:@"Url"];
	m_Gender = [self getStringValueForSDMPropertyWithName:@"Gender"];
	m_RelatedPartnerID = [self getStringValueForSDMPropertyWithName:@"RelatedPartnerID"];
	m_Landx50 = [self getStringValueForSDMPropertyWithName:@"Landx50"];
}

+ (NSMutableArray *)createContactPersonEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        ContactPerson *contactPersonObject = [[ContactPerson alloc] initWithSDMEntry:entry];
        [entries addObject:contactPersonObject];
    }
    return entries;
}


+ (NSMutableArray *)parseContactPersonEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:contactPersonEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [ContactPerson createContactPersonEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedContactPersonEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:contactPersonEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [ContactPerson createContactPersonEntriesForSDMEntries:sdmEntries];
}

+ (ContactPerson *)parseContactPersonEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *contactPersonEntries = [ContactPerson parseContactPersonEntriesWithData:aData error:error];
    if (!contactPersonEntries) {
    	return nil;
    }
    return (ContactPerson *)[ContactPerson getFirstObjectFromArray:contactPersonEntries];
}

+ (ContactPerson *)parseExpandedContactPersonEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:contactPersonEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *contactPersonEntries = [ContactPerson createContactPersonEntriesForSDMEntries:sdmEntries];
	return (ContactPerson *)[ContactPerson getFirstObjectFromArray:contactPersonEntries];
}



@end

#pragma mark - Image
@implementation Image 

@synthesize ImageType = m_ImageType;
@synthesize ImageKey = m_ImageKey;
@synthesize MimeType = m_MimeType;
@synthesize Image_b64 = m_Image_b64;
@synthesize Filename = m_Filename;

static NSMutableDictionary *imageLabels = nil;
static SDMODataEntitySchema *imageEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:imageEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ImageType forSDMPropertyWithName:@"ImageType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ImageKey forSDMPropertyWithName:@"ImageKey" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MimeType forSDMPropertyWithName:@"MimeType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Image_b64 forSDMPropertyWithName:@"Image_b64" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Filename forSDMPropertyWithName:@"Filename" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"ImageCollection" workspaceOfCollection:nil];
    imageEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"ImageCollection" andService:aService];
    	if (properties) {    
	    	imageLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[imageLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:imageLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_ImageType = [self getStringValueForSDMPropertyWithName:@"ImageType"];
	m_ImageKey = [self getStringValueForSDMPropertyWithName:@"ImageKey"];
	m_MimeType = [self getStringValueForSDMPropertyWithName:@"MimeType"];
	m_Image_b64 = [self getStringValueForSDMPropertyWithName:@"Image_b64"];
	m_Filename = [self getStringValueForSDMPropertyWithName:@"Filename"];
}

+ (NSMutableArray *)createImageEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        Image *imageObject = [[Image alloc] initWithSDMEntry:entry];
        [entries addObject:imageObject];
    }
    return entries;
}


+ (NSMutableArray *)parseImageEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:imageEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [Image createImageEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedImageEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:imageEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [Image createImageEntriesForSDMEntries:sdmEntries];
}

+ (Image *)parseImageEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *imageEntries = [Image parseImageEntriesWithData:aData error:error];
    if (!imageEntries) {
    	return nil;
    }
    return (Image *)[Image getFirstObjectFromArray:imageEntries];
}

+ (Image *)parseExpandedImageEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:imageEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *imageEntries = [Image createImageEntriesForSDMEntries:sdmEntries];
	return (Image *)[Image getFirstObjectFromArray:imageEntries];
}



@end

#pragma mark - MediaForBusinessPartner
@implementation MediaForBusinessPartner 

@synthesize BusinessPartnerID = m_BusinessPartnerID;
@synthesize MediaID = m_MediaID;
@synthesize MimeType = m_MimeType;
@synthesize FileName = m_FileName;
@synthesize FileSize = m_FileSize;
@synthesize mediaLinkRead = m_mediaLinkRead;
@synthesize mediaLinkEdit = m_mediaLinkEdit;

static NSMutableDictionary *mediaForBusinessPartnerLabels = nil;
static SDMODataEntitySchema *mediaForBusinessPartnerEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:mediaForBusinessPartnerEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BusinessPartnerID forSDMPropertyWithName:@"BusinessPartnerID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MediaID forSDMPropertyWithName:@"MediaID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MimeType forSDMPropertyWithName:@"MimeType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FileName forSDMPropertyWithName:@"FileName" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.FileSize forSDMPropertyWithName:@"FileSize" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"MediaCollectionForBusinessPartner" workspaceOfCollection:nil];
    mediaForBusinessPartnerEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"MediaCollectionForBusinessPartner" andService:aService];
    	if (properties) {    
	    	mediaForBusinessPartnerLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[mediaForBusinessPartnerLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:mediaForBusinessPartnerLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_BusinessPartnerID = [self getStringValueForSDMPropertyWithName:@"BusinessPartnerID"];
	m_MediaID = [self getStringValueForSDMPropertyWithName:@"MediaID"];
	m_MimeType = [self getStringValueForSDMPropertyWithName:@"MimeType"];
	m_FileName = [self getStringValueForSDMPropertyWithName:@"FileName"];
	m_FileSize = [self getIntValueForSDMPropertyWithName:@"FileSize"];
}

- (void)loadMediaLinkProperties
{
	[super loadMediaLinkProperties];
	m_mediaLinkRead = [self getMediaLinkForReading];
	m_mediaLinkEdit = [self getMediaLinkForEditing];
}

+ (NSMutableArray *)createMediaForBusinessPartnerEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        MediaForBusinessPartner *mediaForBusinessPartnerObject = [[MediaForBusinessPartner alloc] initWithSDMEntry:entry];
        [entries addObject:mediaForBusinessPartnerObject];
    }
    return entries;
}


+ (NSMutableArray *)parseMediaForBusinessPartnerEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:mediaForBusinessPartnerEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedMediaForBusinessPartnerEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForBusinessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (MediaForBusinessPartner *)parseMediaForBusinessPartnerEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *mediaForBusinessPartnerEntries = [MediaForBusinessPartner parseMediaForBusinessPartnerEntriesWithData:aData error:error];
    if (!mediaForBusinessPartnerEntries) {
    	return nil;
    }
    return (MediaForBusinessPartner *)[MediaForBusinessPartner getFirstObjectFromArray:mediaForBusinessPartnerEntries];
}

+ (MediaForBusinessPartner *)parseExpandedMediaForBusinessPartnerEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForBusinessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *mediaForBusinessPartnerEntries = [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:sdmEntries];
	return (MediaForBusinessPartner *)[MediaForBusinessPartner getFirstObjectFromArray:mediaForBusinessPartnerEntries];
}



@end

#pragma mark - BusinessPartner
@implementation BusinessPartner 

@synthesize Landx50 = m_Landx50;
@synthesize PartnerID = m_PartnerID;
@synthesize PartnerType = m_PartnerType;
@synthesize Name = m_Name;
@synthesize Street = m_Street;
@synthesize HouseNumber = m_HouseNumber;
@synthesize PostalCode = m_PostalCode;
@synthesize City = m_City;
@synthesize Region = m_Region;
@synthesize Country = m_Country;
@synthesize TelephoneNumber = m_TelephoneNumber;
@synthesize FaxNumber = m_FaxNumber;
@synthesize Email = m_Email;
@synthesize Latitude = m_Latitude;
@synthesize Longitude = m_Longitude;
@synthesize Url = m_Url;
@synthesize ContactPersonsQuery = m_ContactPersonsQuery;
@synthesize ContactPersons = m_ContactPersons;
@synthesize BusinessPartner2MediaCollectionQuery = m_BusinessPartner2MediaCollectionQuery;
@synthesize BusinessPartner2MediaCollection = m_BusinessPartner2MediaCollection;

static NSMutableDictionary *businessPartnerLabels = nil;
static SDMODataEntitySchema *businessPartnerEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:businessPartnerEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.ContactPersons count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.ContactPersons] forKey:@"ContactPersons"];
    }
    if ([self.BusinessPartner2MediaCollection count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.BusinessPartner2MediaCollection] forKey:@"BusinessPartner2MediaCollection"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Landx50 forSDMPropertyWithName:@"Landx50" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PartnerID forSDMPropertyWithName:@"PartnerID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PartnerType forSDMPropertyWithName:@"PartnerType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Name forSDMPropertyWithName:@"Name" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Street forSDMPropertyWithName:@"Street" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.HouseNumber forSDMPropertyWithName:@"HouseNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.PostalCode forSDMPropertyWithName:@"PostalCode" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.City forSDMPropertyWithName:@"City" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Region forSDMPropertyWithName:@"Region" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Country forSDMPropertyWithName:@"Country" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.TelephoneNumber forSDMPropertyWithName:@"TelephoneNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FaxNumber forSDMPropertyWithName:@"FaxNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Email forSDMPropertyWithName:@"Email" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Latitude forSDMPropertyWithName:@"Latitude" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Longitude forSDMPropertyWithName:@"Longitude" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Url forSDMPropertyWithName:@"Url" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"BusinessPartners" workspaceOfCollection:nil];
    businessPartnerEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"BusinessPartners" andService:aService];
    	if (properties) {    
	    	businessPartnerLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[businessPartnerLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:businessPartnerLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Landx50 = [self getStringValueForSDMPropertyWithName:@"Landx50"];
	m_PartnerID = [self getStringValueForSDMPropertyWithName:@"PartnerID"];
	m_PartnerType = [self getStringValueForSDMPropertyWithName:@"PartnerType"];
	m_Name = [self getStringValueForSDMPropertyWithName:@"Name"];
	m_Street = [self getStringValueForSDMPropertyWithName:@"Street"];
	m_HouseNumber = [self getStringValueForSDMPropertyWithName:@"HouseNumber"];
	m_PostalCode = [self getStringValueForSDMPropertyWithName:@"PostalCode"];
	m_City = [self getStringValueForSDMPropertyWithName:@"City"];
	m_Region = [self getStringValueForSDMPropertyWithName:@"Region"];
	m_Country = [self getStringValueForSDMPropertyWithName:@"Country"];
	m_TelephoneNumber = [self getStringValueForSDMPropertyWithName:@"TelephoneNumber"];
	m_FaxNumber = [self getStringValueForSDMPropertyWithName:@"FaxNumber"];
	m_Email = [self getStringValueForSDMPropertyWithName:@"Email"];
	m_Latitude = [self getStringValueForSDMPropertyWithName:@"Latitude"];
	m_Longitude = [self getStringValueForSDMPropertyWithName:@"Longitude"];
	m_Url = [self getStringValueForSDMPropertyWithName:@"Url"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_ContactPersonsQuery = [self getRelatedLinkForNavigationName:@"ContactPersons"];
    m_BusinessPartner2MediaCollectionQuery = [self getRelatedLinkForNavigationName:@"BusinessPartner2MediaCollection"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"ContactPersons"];
    m_ContactPersons = [ContactPerson createContactPersonEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"BusinessPartner2MediaCollection"];
    m_BusinessPartner2MediaCollection = [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createBusinessPartnerEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        BusinessPartner *businessPartnerObject = [[BusinessPartner alloc] initWithSDMEntry:entry];
        [entries addObject:businessPartnerObject];
    }
    return entries;
}


+ (NSMutableArray *)parseBusinessPartnerEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:businessPartnerEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [BusinessPartner createBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedBusinessPartnerEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:businessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [BusinessPartner createBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (BusinessPartner *)parseBusinessPartnerEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *businessPartnerEntries = [BusinessPartner parseBusinessPartnerEntriesWithData:aData error:error];
    if (!businessPartnerEntries) {
    	return nil;
    }
    return (BusinessPartner *)[BusinessPartner getFirstObjectFromArray:businessPartnerEntries];
}

+ (BusinessPartner *)parseExpandedBusinessPartnerEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:businessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *businessPartnerEntries = [BusinessPartner createBusinessPartnerEntriesForSDMEntries:sdmEntries];
	return (BusinessPartner *)[BusinessPartner getFirstObjectFromArray:businessPartnerEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadContactPersonsWithData:(NSData *)aData error:(NSError **)error
{
    self.ContactPersons = [ContactPerson parseContactPersonEntriesWithData:aData error:error];
    if (!self.ContactPersons) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadBusinessPartner2MediaCollectionWithData:(NSData *)aData error:(NSError **)error
{
    self.BusinessPartner2MediaCollection = [MediaForBusinessPartner parseMediaForBusinessPartnerEntriesWithData:aData error:error];
    if (!self.BusinessPartner2MediaCollection) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - Material
@implementation Material 

@synthesize SalesOrganization = m_SalesOrganization;
@synthesize EANCode = m_EANCode;
@synthesize EANCategory = m_EANCategory;
@synthesize MaterialNumber = m_MaterialNumber;
@synthesize Description = m_Description;
@synthesize Plant = m_Plant;
@synthesize Quantity = m_Quantity;
@synthesize UoM = m_UoM;

static NSMutableDictionary *materialLabels = nil;
static SDMODataEntitySchema *materialEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:materialEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SalesOrganization forSDMPropertyWithName:@"SalesOrganization" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.EANCode forSDMPropertyWithName:@"EANCode" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.EANCategory forSDMPropertyWithName:@"EANCategory" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MaterialNumber forSDMPropertyWithName:@"MaterialNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Description forSDMPropertyWithName:@"Description" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Plant forSDMPropertyWithName:@"Plant" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.Quantity forSDMPropertyWithName:@"Quantity" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.UoM forSDMPropertyWithName:@"UoM" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"Materials" workspaceOfCollection:nil];
    materialEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"Materials" andService:aService];
    	if (properties) {    
	    	materialLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[materialLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:materialLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_SalesOrganization = [self getStringValueForSDMPropertyWithName:@"SalesOrganization"];
	m_EANCode = [self getStringValueForSDMPropertyWithName:@"EANCode"];
	m_EANCategory = [self getStringValueForSDMPropertyWithName:@"EANCategory"];
	m_MaterialNumber = [self getStringValueForSDMPropertyWithName:@"MaterialNumber"];
	m_Description = [self getStringValueForSDMPropertyWithName:@"Description"];
	m_Plant = [self getStringValueForSDMPropertyWithName:@"Plant"];
	m_Quantity = [self getIntValueForSDMPropertyWithName:@"Quantity"];
	m_UoM = [self getStringValueForSDMPropertyWithName:@"UoM"];
}

+ (NSMutableArray *)createMaterialEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        Material *materialObject = [[Material alloc] initWithSDMEntry:entry];
        [entries addObject:materialObject];
    }
    return entries;
}


+ (NSMutableArray *)parseMaterialEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:materialEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [Material createMaterialEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedMaterialEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:materialEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [Material createMaterialEntriesForSDMEntries:sdmEntries];
}

+ (Material *)parseMaterialEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *materialEntries = [Material parseMaterialEntriesWithData:aData error:error];
    if (!materialEntries) {
    	return nil;
    }
    return (Material *)[Material getFirstObjectFromArray:materialEntries];
}

+ (Material *)parseExpandedMaterialEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:materialEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *materialEntries = [Material createMaterialEntriesForSDMEntries:sdmEntries];
	return (Material *)[Material getFirstObjectFromArray:materialEntries];
}



@end

#pragma mark - SalesDocument
@implementation SalesDocument 

@synthesize status = m_status;
@synthesize OrderID = m_OrderID;
@synthesize OrderType = m_OrderType;
@synthesize Description = m_Description;
@synthesize DocumentDate = m_DocumentDate;
@synthesize CustomerID = m_CustomerID;
@synthesize SalesOrganization = m_SalesOrganization;
@synthesize DistribuitonChannel = m_DistribuitonChannel;
@synthesize Division = m_Division;
@synthesize NetValue = m_NetValue;
@synthesize Currency = m_Currency;
@synthesize RequestedDeliveryDate = m_RequestedDeliveryDate;
@synthesize CustomerPurchaseOrderNumber = m_CustomerPurchaseOrderNumber;
@synthesize ItemsQuery = m_ItemsQuery;
@synthesize Items = m_Items;

static NSMutableDictionary *salesDocumentLabels = nil;
static SDMODataEntitySchema *salesDocumentEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:salesDocumentEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.Items count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.Items] forKey:@"Items"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
		[self.status setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"status" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OrderID forSDMPropertyWithName:@"OrderID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OrderType forSDMPropertyWithName:@"OrderType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Description forSDMPropertyWithName:@"Description" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.DocumentDate forSDMPropertyWithName:@"DocumentDate" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CustomerID forSDMPropertyWithName:@"CustomerID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SalesOrganization forSDMPropertyWithName:@"SalesOrganization" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.DistribuitonChannel forSDMPropertyWithName:@"DistribuitonChannel" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Division forSDMPropertyWithName:@"Division" error:&innerError];
    	[BaseODataObject setDecimalValueForSDMEntry:m_SDMEntry withValue:self.NetValue forSDMPropertyWithName:@"NetValue" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Currency forSDMPropertyWithName:@"Currency" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.RequestedDeliveryDate forSDMPropertyWithName:@"RequestedDeliveryDate" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CustomerPurchaseOrderNumber forSDMPropertyWithName:@"CustomerPurchaseOrderNumber" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"SalesDocuments" workspaceOfCollection:nil];
    salesDocumentEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"SalesDocuments" andService:aService];
    	if (properties) {    
	    	salesDocumentLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
				if ([property.name isEqualToString:@"status"]) {
	                [SalesOrderStatus loadLabels:property.children];
	            }
	        	[salesDocumentLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:salesDocumentLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_status = [[SalesOrderStatus alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"status"]];
	m_OrderID = [self getStringValueForSDMPropertyWithName:@"OrderID"];
	m_OrderType = [self getStringValueForSDMPropertyWithName:@"OrderType"];
	m_Description = [self getStringValueForSDMPropertyWithName:@"Description"];
	m_DocumentDate = [self getDateTimeValueForSDMPropertyWithName:@"DocumentDate"];
	m_CustomerID = [self getStringValueForSDMPropertyWithName:@"CustomerID"];
	m_SalesOrganization = [self getStringValueForSDMPropertyWithName:@"SalesOrganization"];
	m_DistribuitonChannel = [self getStringValueForSDMPropertyWithName:@"DistribuitonChannel"];
	m_Division = [self getStringValueForSDMPropertyWithName:@"Division"];
	m_NetValue = [self getDecimalValueForSDMPropertyWithName:@"NetValue"];
	m_Currency = [self getStringValueForSDMPropertyWithName:@"Currency"];
	m_RequestedDeliveryDate = [self getDateTimeValueForSDMPropertyWithName:@"RequestedDeliveryDate"];
	m_CustomerPurchaseOrderNumber = [self getStringValueForSDMPropertyWithName:@"CustomerPurchaseOrderNumber"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_ItemsQuery = [self getRelatedLinkForNavigationName:@"Items"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"Items"];
    m_Items = [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createSalesDocumentEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        SalesDocument *salesDocumentObject = [[SalesDocument alloc] initWithSDMEntry:entry];
        [entries addObject:salesDocumentObject];
    }
    return entries;
}


+ (NSMutableArray *)parseSalesDocumentEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:salesDocumentEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocument createSalesDocumentEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedSalesDocumentEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocument createSalesDocumentEntriesForSDMEntries:sdmEntries];
}

+ (SalesDocument *)parseSalesDocumentEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *salesDocumentEntries = [SalesDocument parseSalesDocumentEntriesWithData:aData error:error];
    if (!salesDocumentEntries) {
    	return nil;
    }
    return (SalesDocument *)[SalesDocument getFirstObjectFromArray:salesDocumentEntries];
}

+ (SalesDocument *)parseExpandedSalesDocumentEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *salesDocumentEntries = [SalesDocument createSalesDocumentEntriesForSDMEntries:sdmEntries];
	return (SalesDocument *)[SalesDocument getFirstObjectFromArray:salesDocumentEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadItemsWithData:(NSData *)aData error:(NSError **)error
{
    self.Items = [SalesDocumentItem parseSalesDocumentItemEntriesWithData:aData error:error];
    if (!self.Items) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - SalesDocumentItem
@implementation SalesDocumentItem 

@synthesize Status = m_Status;
@synthesize NetValue = m_NetValue;
@synthesize NetPrice = m_NetPrice;
@synthesize OrderID = m_OrderID;
@synthesize ItemNumber = m_ItemNumber;
@synthesize Material = m_Material;
@synthesize UoM = m_UoM;
@synthesize Description = m_Description;
@synthesize Plant = m_Plant;
@synthesize Quantity = m_Quantity;
@synthesize SalesDocumentQuery = m_SalesDocumentQuery;
@synthesize SalesDocument = m_SalesDocument;

static NSMutableDictionary *salesDocumentItemLabels = nil;
static SDMODataEntitySchema *salesDocumentItemEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:salesDocumentItemEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.SalesDocument count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.SalesDocument] forKey:@"SalesDocument"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
		[self.Status setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Status" error:&innerError];
    	[BaseODataObject setDecimalValueForSDMEntry:m_SDMEntry withValue:self.NetValue forSDMPropertyWithName:@"NetValue" error:&innerError];
    	[BaseODataObject setDecimalValueForSDMEntry:m_SDMEntry withValue:self.NetPrice forSDMPropertyWithName:@"NetPrice" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OrderID forSDMPropertyWithName:@"OrderID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ItemNumber forSDMPropertyWithName:@"ItemNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Material forSDMPropertyWithName:@"Material" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.UoM forSDMPropertyWithName:@"UoM" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Description forSDMPropertyWithName:@"Description" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Plant forSDMPropertyWithName:@"Plant" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.Quantity forSDMPropertyWithName:@"Quantity" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"SalesDocumentItems" workspaceOfCollection:nil];
    salesDocumentItemEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"SalesDocumentItems" andService:aService];
    	if (properties) {    
	    	salesDocumentItemLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
				if ([property.name isEqualToString:@"Status"]) {
	                [SalesOrderStatus loadLabels:property.children];
	            }
	        	[salesDocumentItemLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:salesDocumentItemLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Status = [[SalesOrderStatus alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Status"]];
	m_NetValue = [self getDecimalValueForSDMPropertyWithName:@"NetValue"];
	m_NetPrice = [self getDecimalValueForSDMPropertyWithName:@"NetPrice"];
	m_OrderID = [self getStringValueForSDMPropertyWithName:@"OrderID"];
	m_ItemNumber = [self getStringValueForSDMPropertyWithName:@"ItemNumber"];
	m_Material = [self getStringValueForSDMPropertyWithName:@"Material"];
	m_UoM = [self getStringValueForSDMPropertyWithName:@"UoM"];
	m_Description = [self getStringValueForSDMPropertyWithName:@"Description"];
	m_Plant = [self getStringValueForSDMPropertyWithName:@"Plant"];
	m_Quantity = [self getIntValueForSDMPropertyWithName:@"Quantity"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_SalesDocumentQuery = [self getRelatedLinkForNavigationName:@"SalesDocument"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"SalesDocument"];
    m_SalesDocument = [SalesDocument createSalesDocumentEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createSalesDocumentItemEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        SalesDocumentItem *salesDocumentItemObject = [[SalesDocumentItem alloc] initWithSDMEntry:entry];
        [entries addObject:salesDocumentItemObject];
    }
    return entries;
}


+ (NSMutableArray *)parseSalesDocumentItemEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:salesDocumentItemEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedSalesDocumentItemEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentItemEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:sdmEntries];
}

+ (SalesDocumentItem *)parseSalesDocumentItemEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *salesDocumentItemEntries = [SalesDocumentItem parseSalesDocumentItemEntriesWithData:aData error:error];
    if (!salesDocumentItemEntries) {
    	return nil;
    }
    return (SalesDocumentItem *)[SalesDocumentItem getFirstObjectFromArray:salesDocumentItemEntries];
}

+ (SalesDocumentItem *)parseExpandedSalesDocumentItemEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentItemEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *salesDocumentItemEntries = [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:sdmEntries];
	return (SalesDocumentItem *)[SalesDocumentItem getFirstObjectFromArray:salesDocumentItemEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadSalesDocumentWithData:(NSData *)aData error:(NSError **)error
{
    self.SalesDocument = [SalesDocument parseSalesDocumentEntriesWithData:aData error:error];
    if (!self.SalesDocument) {
    	return NO;
    }
    return YES;
}


@end


#pragma mark - SALESAPP_SRV Service Proxy


@implementation SALESAPP_SRVService

@synthesize SalesDocumentsQuery = m_SalesDocumentsQuery;
@synthesize SalesDocumentItemsQuery = m_SalesDocumentItemsQuery;
@synthesize ContactPersonsQuery = m_ContactPersonsQuery;
@synthesize ImageCollectionQuery = m_ImageCollectionQuery;
@synthesize MediaCollectionForBusinessPartnerQuery = m_MediaCollectionForBusinessPartnerQuery;
@synthesize BusinessPartnersQuery = m_BusinessPartnersQuery;
@synthesize MaterialsQuery = m_MaterialsQuery;

- (NSString *)getServiceDocumentFilename
{
	return SALESAPP_SRV_SERVICE_DOCUMENT;
}

- (NSString *)getServiceMetadataFilename
{
	return SALESAPP_SRV_SERVICE_METADATA;
}

- (void)loadEntitySetQueries
{
	[super loadEntitySetQueries];
    m_SalesDocumentsQuery = [self getQueryForRelativePath:@"SalesDocuments"];
    m_SalesDocumentItemsQuery = [self getQueryForRelativePath:@"SalesDocumentItems"];
    m_ContactPersonsQuery = [self getQueryForRelativePath:@"ContactPersons"];
    m_ImageCollectionQuery = [self getQueryForRelativePath:@"ImageCollection"];
    m_MediaCollectionForBusinessPartnerQuery = [self getQueryForRelativePath:@"MediaCollectionForBusinessPartner"];
    m_BusinessPartnersQuery = [self getQueryForRelativePath:@"BusinessPartners"];
    m_MaterialsQuery = [self getQueryForRelativePath:@"Materials"];
}

- (void)loadEntitySchemaForAllEntityTypes
{
    [super loadEntitySchemaForAllEntityTypes];
    [ContactPerson loadEntitySchema:m_serviceDocument];
    [Image loadEntitySchema:m_serviceDocument];
    [MediaForBusinessPartner loadEntitySchema:m_serviceDocument];
    [BusinessPartner loadEntitySchema:m_serviceDocument];
    [Material loadEntitySchema:m_serviceDocument];
    [SalesDocument loadEntitySchema:m_serviceDocument];
    [SalesDocumentItem loadEntitySchema:m_serviceDocument];
}

- (void)loadLabels
{
    [super loadLabels];
    [ContactPerson loadLabels:m_serviceDocument];
    [Image loadLabels:m_serviceDocument];
    [MediaForBusinessPartner loadLabels:m_serviceDocument];
    [BusinessPartner loadLabels:m_serviceDocument];
    [Material loadLabels:m_serviceDocument];
    [SalesDocument loadLabels:m_serviceDocument];
    [SalesDocumentItem loadLabels:m_serviceDocument];
}

 
#pragma mark Service Entity Set methods
- (NSMutableArray *)getSalesDocumentsWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocument parseExpandedSalesDocumentEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getSalesDocumentsEntryQueryWithOrderID:(NSString *)OrderID
{
	OrderID = [ODataQuery encodeURLParameter:OrderID];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocuments(OrderID=%@)", OrderID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getSalesDocumentsEntryQueryTypedWithOrderID:(NSString *)OrderID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *OrderIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:OrderID]];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocuments(OrderID=%@)", OrderIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (SalesDocument *)getSalesDocumentsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocument parseExpandedSalesDocumentEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getSalesDocumentItemsWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocumentItem parseExpandedSalesDocumentItemEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getSalesDocumentItemsEntryQueryWithOrderID:(NSString *)OrderID andItemNumber:(NSString *)ItemNumber
{
	OrderID = [ODataQuery encodeURLParameter:OrderID];
	ItemNumber = [ODataQuery encodeURLParameter:ItemNumber];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocumentItems(OrderID=%@,ItemNumber=%@)", OrderID, ItemNumber];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getSalesDocumentItemsEntryQueryTypedWithOrderID:(NSString *)OrderID andItemNumber:(NSString *)ItemNumber
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *OrderIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:OrderID]];
	NSString *ItemNumberUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ItemNumber]];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocumentItems(OrderID=%@,ItemNumber=%@)", OrderIDUri, ItemNumberUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (SalesDocumentItem *)getSalesDocumentItemsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocumentItem parseExpandedSalesDocumentItemEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getContactPersonsWithData:(NSData *)aData error:(NSError **)error
{
	return [ContactPerson parseExpandedContactPersonEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getContactPersonsEntryQueryWithContactPersonID:(NSString *)ContactPersonID
{
	ContactPersonID = [ODataQuery encodeURLParameter:ContactPersonID];
	NSString *relativePath = [NSString stringWithFormat:@"ContactPersons(ContactPersonID=%@)", ContactPersonID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getContactPersonsEntryQueryTypedWithContactPersonID:(NSString *)ContactPersonID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *ContactPersonIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ContactPersonID]];
	NSString *relativePath = [NSString stringWithFormat:@"ContactPersons(ContactPersonID=%@)", ContactPersonIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ContactPerson *)getContactPersonsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [ContactPerson parseExpandedContactPersonEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getImageCollectionWithData:(NSData *)aData error:(NSError **)error
{
	return [Image parseExpandedImageEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getImageCollectionEntryQueryWithImageType:(NSString *)ImageType andImageKey:(NSString *)ImageKey
{
	ImageType = [ODataQuery encodeURLParameter:ImageType];
	ImageKey = [ODataQuery encodeURLParameter:ImageKey];
	NSString *relativePath = [NSString stringWithFormat:@"ImageCollection(ImageType=%@,ImageKey=%@)", ImageType, ImageKey];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getImageCollectionEntryQueryTypedWithImageType:(NSString *)ImageType andImageKey:(NSString *)ImageKey
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *ImageTypeUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ImageType]];
	NSString *ImageKeyUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ImageKey]];
	NSString *relativePath = [NSString stringWithFormat:@"ImageCollection(ImageType=%@,ImageKey=%@)", ImageTypeUri, ImageKeyUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (Image *)getImageCollectionEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [Image parseExpandedImageEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getMediaCollectionForBusinessPartnerWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForBusinessPartner parseExpandedMediaForBusinessPartnerEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getMediaCollectionForBusinessPartnerEntryQueryWithBusinessPartnerID:(NSString *)BusinessPartnerID andMediaID:(NSString *)MediaID
{
	BusinessPartnerID = [ODataQuery encodeURLParameter:BusinessPartnerID];
	MediaID = [ODataQuery encodeURLParameter:MediaID];
	NSString *relativePath = [NSString stringWithFormat:@"MediaCollectionForBusinessPartner(BusinessPartnerID=%@,MediaID=%@)", BusinessPartnerID, MediaID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getMediaCollectionForBusinessPartnerEntryQueryTypedWithBusinessPartnerID:(NSString *)BusinessPartnerID andMediaID:(NSString *)MediaID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *BusinessPartnerIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:BusinessPartnerID]];
	NSString *MediaIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MediaID]];
	NSString *relativePath = [NSString stringWithFormat:@"MediaCollectionForBusinessPartner(BusinessPartnerID=%@,MediaID=%@)", BusinessPartnerIDUri, MediaIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (MediaForBusinessPartner *)getMediaCollectionForBusinessPartnerEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForBusinessPartner parseExpandedMediaForBusinessPartnerEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getBusinessPartnersWithData:(NSData *)aData error:(NSError **)error
{
	return [BusinessPartner parseExpandedBusinessPartnerEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getBusinessPartnersEntryQueryWithPartnerID:(NSString *)PartnerID
{
	PartnerID = [ODataQuery encodeURLParameter:PartnerID];
	NSString *relativePath = [NSString stringWithFormat:@"BusinessPartners(PartnerID=%@)", PartnerID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getBusinessPartnersEntryQueryTypedWithPartnerID:(NSString *)PartnerID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *PartnerIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:PartnerID]];
	NSString *relativePath = [NSString stringWithFormat:@"BusinessPartners(PartnerID=%@)", PartnerIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (BusinessPartner *)getBusinessPartnersEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [BusinessPartner parseExpandedBusinessPartnerEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getMaterialsWithData:(NSData *)aData error:(NSError **)error
{
	return [Material parseExpandedMaterialEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getMaterialsEntryQueryWithMaterialNumber:(NSString *)MaterialNumber
{
	MaterialNumber = [ODataQuery encodeURLParameter:MaterialNumber];
	NSString *relativePath = [NSString stringWithFormat:@"Materials(MaterialNumber=%@)", MaterialNumber];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getMaterialsEntryQueryTypedWithMaterialNumber:(NSString *)MaterialNumber
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *MaterialNumberUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MaterialNumber]];
	NSString *relativePath = [NSString stringWithFormat:@"Materials(MaterialNumber=%@)", MaterialNumberUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (Material *)getMaterialsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [Material parseExpandedMaterialEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}



#pragma mark Service Function Import methods 
- (ODataQuery *)getApproveCustomerQueryWithParameters:(NSDictionary *)aParameters
{
	ODataQuery *query = [self getQueryForRelativePath:@"ApproveCustomer"];
	for (NSString *key in [aParameters allKeys]) 
    {
        [query addParameterWithKey:key andValue:[aParameters valueForKey:key]];
    }
    return query;
}

- (ODataQuery *)getApproveCustomerQueryTypedWithPartnerID:(NSString *)PartnerID
{
	SDMODataFunctionImport *functionImport = [[m_serviceDocument getFunctionImports] objectForKey:@"ApproveCustomer"];
	if (functionImport) {
		NSMutableDictionary *parameters = [functionImport getWritableParameters];

		@try {
			if (PartnerID) [(SDMODataPropertyValueString *)[parameters objectForKey:@"PartnerID"] setValue:PartnerID];
		}
		@catch (NSException* e) {
			NSString *exceptionMsg = [NSString stringWithFormat:@"Exception during setting function parameter values. Exception: %@", e.description];
			LOGERROR(exceptionMsg);
			return nil;
		}
		
		NSString *functionUrl = [functionImport generateFunctionImportUrl:m_serviceDocument.baseUrl parameters:parameters];
		return [[ODataQuery alloc] initWithURL:[NSURL URLWithString:functionUrl]];
        
	}
	return nil;
}

- (BusinessPartner *)getApproveCustomerResultWithData:(NSData *)aData error:(NSError **)error
{
	return [self getBusinessPartnersEntryWithData:aData error:error];
}

- (ODataQuery *)getGetImageQueryWithParameters:(NSDictionary *)aParameters
{
	ODataQuery *query = [self getQueryForRelativePath:@"GetImage"];
	for (NSString *key in [aParameters allKeys]) 
    {
        [query addParameterWithKey:key andValue:[aParameters valueForKey:key]];
    }
    return query;
}

- (ODataQuery *)getGetImageQueryTypedWithKeyword:(NSString *)Keyword andID:(NSString *)ID andEntityType:(NSString *)EntityType
{
	SDMODataFunctionImport *functionImport = [[m_serviceDocument getFunctionImports] objectForKey:@"GetImage"];
	if (functionImport) {
		NSMutableDictionary *parameters = [functionImport getWritableParameters];

		@try {
			if (Keyword) [(SDMODataPropertyValueString *)[parameters objectForKey:@"Keyword"] setValue:Keyword];
			if (ID) [(SDMODataPropertyValueString *)[parameters objectForKey:@"ID"] setValue:ID];
			if (EntityType) [(SDMODataPropertyValueString *)[parameters objectForKey:@"EntityType"] setValue:EntityType];
		}
		@catch (NSException* e) {
			NSString *exceptionMsg = [NSString stringWithFormat:@"Exception during setting function parameter values. Exception: %@", e.description];
			LOGERROR(exceptionMsg);
			return nil;
		}
		
		NSString *functionUrl = [functionImport generateFunctionImportUrl:m_serviceDocument.baseUrl parameters:parameters];
		return [[ODataQuery alloc] initWithURL:[NSURL URLWithString:functionUrl]];
        
	}
	return nil;
}

- (Image *)getGetImageResultWithData:(NSData *)aData error:(NSError **)error
{
	return [self getImageCollectionEntryWithData:aData error:error];
}


@end
