/*
 
 Auto-Generated by the SAP NetWeaver Gateway developer tool for Xcode, Version 2.5.300.0
  
 File: ECCSALESDATA_SRVService.h
 Abstract: The generated proxy classes for the ECCSALESDATA_SRV Service. Service Version: 1.  
*/

#import "ECCSALESDATA_SRVService.h"
#import "BaseODataObject.h"
#import "Logger.h"
#import "SDMODataEntitySchema.h"
#import "SDMODataCollection.h"
#import "SDMODataFunctionImport.h"
#import "TypeConverter.h"

#define ECCSALESDATA_SRV_SERVICE_DOCUMENT @"ECCSALESDATA_SRVServiceDocument"
#define ECCSALESDATA_SRV_SERVICE_METADATA @"ECCSALESDATA_SRVServiceMetadata"

#pragma mark - Complex Types


#pragma mark GeoCode
@implementation GeoCode 

@synthesize Longitude = m_Longitude;
@synthesize Latitude = m_Latitude;

static NSMutableDictionary *geoCodeLabels = nil;

+ (void)loadLabels:(NSMutableDictionary *)sdmProperties
{
    geoCodeLabels = [NSMutableDictionary dictionary];
    for (SDMODataPropertyInfo *property in [sdmProperties allValues]) {
        [geoCodeLabels setValue:property.label forKey:property.name];
    }
}

+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:geoCodeLabels forProperty:aPropertyName];
}

- (BOOL)setComplexTypePropertiesToSDMEntry:(SDMODataEntry *)aSDMEntry complexTypePropertyName:(NSString *)aComplexPropertyName error:(NSError * __autoreleasing *)error
{
	BOOL result = [super setComplexTypePropertiesToSDMEntry:aSDMEntry complexTypePropertyName:aComplexPropertyName error:error];
	if (![BaseODataObject setDoubleValueForSDMEntry:aSDMEntry withValue:self.Longitude forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Longitude"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setDoubleValueForSDMEntry:aSDMEntry withValue:self.Latitude forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Latitude"] error:error]) {
		result = NO;
	}
	
	return result;
}

- (void)loadProperties
{
    [super loadProperties];
	m_Longitude = [self getDoubleValueForSDMPropertyWithName:@"Longitude"];
	m_Latitude = [self getDoubleValueForSDMPropertyWithName:@"Latitude"];
}

@end

#pragma mark Address
@implementation Address 

@synthesize Street = m_Street;
@synthesize HouseNumber = m_HouseNumber;
@synthesize HouseNumberSupplement = m_HouseNumberSupplement;
@synthesize PostalCode = m_PostalCode;
@synthesize City = m_City;
@synthesize Region = m_Region;
@synthesize Country = m_Country;
@synthesize RegionCodeISO = m_RegionCodeISO;
@synthesize CountryCodeISO = m_CountryCodeISO;
@synthesize GeoCode = m_GeoCode;

static NSMutableDictionary *addressLabels = nil;

+ (void)loadLabels:(NSMutableDictionary *)sdmProperties
{
    addressLabels = [NSMutableDictionary dictionary];
    for (SDMODataPropertyInfo *property in [sdmProperties allValues]) {
			if ([property.name isEqualToString:@"GeoCode"]) {
                [GeoCode loadLabels:property.children];
            }
        [addressLabels setValue:property.label forKey:property.name];
    }
}

+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:addressLabels forProperty:aPropertyName];
}

- (BOOL)setComplexTypePropertiesToSDMEntry:(SDMODataEntry *)aSDMEntry complexTypePropertyName:(NSString *)aComplexPropertyName error:(NSError * __autoreleasing *)error
{
	BOOL result = [super setComplexTypePropertiesToSDMEntry:aSDMEntry complexTypePropertyName:aComplexPropertyName error:error];
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Street forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Street"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.HouseNumber forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\HouseNumber"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.HouseNumberSupplement forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\HouseNumberSupplement"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.PostalCode forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\PostalCode"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.City forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\City"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Region forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Region"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Country forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Country"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.RegionCodeISO forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\RegionCodeISO"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.CountryCodeISO forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\CountryCodeISO"] error:error]) {
		result = NO;
	}
	
	if (![self.GeoCode setComplexTypePropertiesToSDMEntry:aSDMEntry complexTypePropertyName:[aComplexPropertyName stringByAppendingString:@"\\GeoCode"] error:error]) {
		result = NO;
	}
	return result;
}

- (void)loadProperties
{
    [super loadProperties];
	m_Street = [self getStringValueForSDMPropertyWithName:@"Street"];
	m_HouseNumber = [self getStringValueForSDMPropertyWithName:@"HouseNumber"];
	m_HouseNumberSupplement = [self getStringValueForSDMPropertyWithName:@"HouseNumberSupplement"];
	m_PostalCode = [self getStringValueForSDMPropertyWithName:@"PostalCode"];
	m_City = [self getStringValueForSDMPropertyWithName:@"City"];
	m_Region = [self getStringValueForSDMPropertyWithName:@"Region"];
	m_Country = [self getStringValueForSDMPropertyWithName:@"Country"];
	m_RegionCodeISO = [self getStringValueForSDMPropertyWithName:@"RegionCodeISO"];
	m_CountryCodeISO = [self getStringValueForSDMPropertyWithName:@"CountryCodeISO"];
	m_GeoCode = [[GeoCode alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"GeoCode"]];
}

@end

#pragma mark Phone
@implementation Phone 

@synthesize PhoneType = m_PhoneType;
@synthesize InternationalDailingCode = m_InternationalDailingCode;
@synthesize PhoneNumber = m_PhoneNumber;
@synthesize PhoneExtension = m_PhoneExtension;
@synthesize Default = m_Default;
@synthesize Comment = m_Comment;

static NSMutableDictionary *phoneLabels = nil;

+ (void)loadLabels:(NSMutableDictionary *)sdmProperties
{
    phoneLabels = [NSMutableDictionary dictionary];
    for (SDMODataPropertyInfo *property in [sdmProperties allValues]) {
        [phoneLabels setValue:property.label forKey:property.name];
    }
}

+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:phoneLabels forProperty:aPropertyName];
}

- (BOOL)setComplexTypePropertiesToSDMEntry:(SDMODataEntry *)aSDMEntry complexTypePropertyName:(NSString *)aComplexPropertyName error:(NSError * __autoreleasing *)error
{
	BOOL result = [super setComplexTypePropertiesToSDMEntry:aSDMEntry complexTypePropertyName:aComplexPropertyName error:error];
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.PhoneType forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\PhoneType"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.InternationalDailingCode forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\InternationalDailingCode"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.PhoneNumber forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\PhoneNumber"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.PhoneExtension forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\PhoneExtension"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Default forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Default"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Comment forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Comment"] error:error]) {
		result = NO;
	}
	
	return result;
}

- (void)loadProperties
{
    [super loadProperties];
	m_PhoneType = [self getStringValueForSDMPropertyWithName:@"PhoneType"];
	m_InternationalDailingCode = [self getStringValueForSDMPropertyWithName:@"InternationalDailingCode"];
	m_PhoneNumber = [self getStringValueForSDMPropertyWithName:@"PhoneNumber"];
	m_PhoneExtension = [self getStringValueForSDMPropertyWithName:@"PhoneExtension"];
	m_Default = [self getStringValueForSDMPropertyWithName:@"Default"];
	m_Comment = [self getStringValueForSDMPropertyWithName:@"Comment"];
}

@end

#pragma mark URI
@implementation URI 

@synthesize URIType = m_URIType;
@synthesize URL = m_URL;
@synthesize LongURL = m_LongURL;
@synthesize Default = m_Default;
@synthesize Comment = m_Comment;

static NSMutableDictionary *uRILabels = nil;

+ (void)loadLabels:(NSMutableDictionary *)sdmProperties
{
    uRILabels = [NSMutableDictionary dictionary];
    for (SDMODataPropertyInfo *property in [sdmProperties allValues]) {
        [uRILabels setValue:property.label forKey:property.name];
    }
}

+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:uRILabels forProperty:aPropertyName];
}

- (BOOL)setComplexTypePropertiesToSDMEntry:(SDMODataEntry *)aSDMEntry complexTypePropertyName:(NSString *)aComplexPropertyName error:(NSError * __autoreleasing *)error
{
	BOOL result = [super setComplexTypePropertiesToSDMEntry:aSDMEntry complexTypePropertyName:aComplexPropertyName error:error];
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.URIType forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\URIType"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.URL forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\URL"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.LongURL forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\LongURL"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setBooleanValueForSDMEntry:aSDMEntry withValue:self.Default forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Default"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Comment forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Comment"] error:error]) {
		result = NO;
	}
	
	return result;
}

- (void)loadProperties
{
    [super loadProperties];
	m_URIType = [self getStringValueForSDMPropertyWithName:@"URIType"];
	m_URL = [self getStringValueForSDMPropertyWithName:@"URL"];
	m_LongURL = [self getStringValueForSDMPropertyWithName:@"LongURL"];
	m_Default = [self getBooleanValueForSDMPropertyWithName:@"Default"];
	m_Comment = [self getStringValueForSDMPropertyWithName:@"Comment"];
}

@end

#pragma mark DocumentStatus
@implementation DocumentStatus 

@synthesize Delivery_Status = m_Delivery_Status;
@synthesize Invoice_Status = m_Invoice_Status;
@synthesize Overall_Status = m_Overall_Status;

static NSMutableDictionary *documentStatusLabels = nil;

+ (void)loadLabels:(NSMutableDictionary *)sdmProperties
{
    documentStatusLabels = [NSMutableDictionary dictionary];
    for (SDMODataPropertyInfo *property in [sdmProperties allValues]) {
        [documentStatusLabels setValue:property.label forKey:property.name];
    }
}

+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:documentStatusLabels forProperty:aPropertyName];
}

- (BOOL)setComplexTypePropertiesToSDMEntry:(SDMODataEntry *)aSDMEntry complexTypePropertyName:(NSString *)aComplexPropertyName error:(NSError * __autoreleasing *)error
{
	BOOL result = [super setComplexTypePropertiesToSDMEntry:aSDMEntry complexTypePropertyName:aComplexPropertyName error:error];
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Delivery_Status forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Delivery_Status"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Invoice_Status forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Invoice_Status"] error:error]) {
		result = NO;
	}
	
	if (![BaseODataObject setStringValueForSDMEntry:aSDMEntry withValue:self.Overall_Status forSDMPropertyWithName:[aComplexPropertyName stringByAppendingString:@"\\Overall_Status"] error:error]) {
		result = NO;
	}
	
	return result;
}

- (void)loadProperties
{
    [super loadProperties];
	m_Delivery_Status = [self getStringValueForSDMPropertyWithName:@"Delivery_Status"];
	m_Invoice_Status = [self getStringValueForSDMPropertyWithName:@"Invoice_Status"];
	m_Overall_Status = [self getStringValueForSDMPropertyWithName:@"Overall_Status"];
}

@end


#pragma mark - Entity Types


#pragma mark - ContactPerson
@implementation ContactPerson 

@synthesize Website = m_Website;
@synthesize Email = m_Email;
@synthesize FaxNumber = m_FaxNumber;
@synthesize PhoneNumber = m_PhoneNumber;
@synthesize Address = m_Address;
@synthesize Gender = m_Gender;
@synthesize RelatedPartnerID = m_RelatedPartnerID;
@synthesize LastName = m_LastName;
@synthesize FirstName = m_FirstName;
@synthesize ContactPersonID = m_ContactPersonID;
@synthesize FullName = m_FullName;
@synthesize MediaCollectionQuery = m_MediaCollectionQuery;
@synthesize MediaCollection = m_MediaCollection;

static NSMutableDictionary *contactPersonLabels = nil;
static SDMODataEntitySchema *contactPersonEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:contactPersonEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.MediaCollection count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.MediaCollection] forKey:@"MediaCollection"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
		[self.Website setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Website" error:&innerError];
		[self.Email setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Email" error:&innerError];
		[self.FaxNumber setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"FaxNumber" error:&innerError];
		[self.PhoneNumber setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"PhoneNumber" error:&innerError];
		[self.Address setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Address" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Gender forSDMPropertyWithName:@"Gender" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.RelatedPartnerID forSDMPropertyWithName:@"RelatedPartnerID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.LastName forSDMPropertyWithName:@"LastName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FirstName forSDMPropertyWithName:@"FirstName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ContactPersonID forSDMPropertyWithName:@"ContactPersonID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FullName forSDMPropertyWithName:@"FullName" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"ContactPersons" workspaceOfCollection:nil];
    contactPersonEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"ContactPersons" andService:aService];
    	if (properties) {    
	    	contactPersonLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
				if ([property.name isEqualToString:@"Website"]) {
	                [URI loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"Email"]) {
	                [URI loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"FaxNumber"]) {
	                [Phone loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"PhoneNumber"]) {
	                [Phone loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"Address"]) {
	                [Address loadLabels:property.children];
	            }
	        	[contactPersonLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:contactPersonLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Website = [[URI alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Website"]];
	m_Email = [[URI alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Email"]];
	m_FaxNumber = [[Phone alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"FaxNumber"]];
	m_PhoneNumber = [[Phone alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"PhoneNumber"]];
	m_Address = [[Address alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Address"]];
	m_Gender = [self getStringValueForSDMPropertyWithName:@"Gender"];
	m_RelatedPartnerID = [self getStringValueForSDMPropertyWithName:@"RelatedPartnerID"];
	m_LastName = [self getStringValueForSDMPropertyWithName:@"LastName"];
	m_FirstName = [self getStringValueForSDMPropertyWithName:@"FirstName"];
	m_ContactPersonID = [self getStringValueForSDMPropertyWithName:@"ContactPersonID"];
	m_FullName = [self getStringValueForSDMPropertyWithName:@"FullName"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_MediaCollectionQuery = [self getRelatedLinkForNavigationName:@"MediaCollection"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"MediaCollection"];
    m_MediaCollection = [MediaForContactPerson createMediaForContactPersonEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createContactPersonEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        ContactPerson *contactPersonObject = [[ContactPerson alloc] initWithSDMEntry:entry];
        [entries addObject:contactPersonObject];
    }
    return entries;
}


+ (NSMutableArray *)parseContactPersonEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:contactPersonEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [ContactPerson createContactPersonEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedContactPersonEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:contactPersonEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [ContactPerson createContactPersonEntriesForSDMEntries:sdmEntries];
}

+ (ContactPerson *)parseContactPersonEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *contactPersonEntries = [ContactPerson parseContactPersonEntriesWithData:aData error:error];
    if (!contactPersonEntries) {
    	return nil;
    }
    return (ContactPerson *)[ContactPerson getFirstObjectFromArray:contactPersonEntries];
}

+ (ContactPerson *)parseExpandedContactPersonEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:contactPersonEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *contactPersonEntries = [ContactPerson createContactPersonEntriesForSDMEntries:sdmEntries];
	return (ContactPerson *)[ContactPerson getFirstObjectFromArray:contactPersonEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadMediaCollectionWithData:(NSData *)aData error:(NSError **)error
{
    self.MediaCollection = [MediaForContactPerson parseMediaForContactPersonEntriesWithData:aData error:error];
    if (!self.MediaCollection) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - BusinessPartner
@implementation BusinessPartner 

@synthesize Website = m_Website;
@synthesize Email = m_Email;
@synthesize FaxNumber = m_FaxNumber;
@synthesize PhoneNumber = m_PhoneNumber;
@synthesize Address = m_Address;
@synthesize BusinessPartnerName = m_BusinessPartnerName;
@synthesize BusinessPartnerType = m_BusinessPartnerType;
@synthesize BusinessPartnerID = m_BusinessPartnerID;
@synthesize ContactPersonsQuery = m_ContactPersonsQuery;
@synthesize ContactPersons = m_ContactPersons;
@synthesize MediaCollectionQuery = m_MediaCollectionQuery;
@synthesize MediaCollection = m_MediaCollection;

static NSMutableDictionary *businessPartnerLabels = nil;
static SDMODataEntitySchema *businessPartnerEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:businessPartnerEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.ContactPersons count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.ContactPersons] forKey:@"ContactPersons"];
    }
    if ([self.MediaCollection count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.MediaCollection] forKey:@"MediaCollection"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
		[self.Website setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Website" error:&innerError];
		[self.Email setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Email" error:&innerError];
		[self.FaxNumber setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"FaxNumber" error:&innerError];
		[self.PhoneNumber setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"PhoneNumber" error:&innerError];
		[self.Address setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Address" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BusinessPartnerName forSDMPropertyWithName:@"BusinessPartnerName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BusinessPartnerType forSDMPropertyWithName:@"BusinessPartnerType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BusinessPartnerID forSDMPropertyWithName:@"BusinessPartnerID" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"BusinessPartners" workspaceOfCollection:nil];
    businessPartnerEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"BusinessPartners" andService:aService];
    	if (properties) {    
	    	businessPartnerLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
				if ([property.name isEqualToString:@"Website"]) {
	                [URI loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"Email"]) {
	                [URI loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"FaxNumber"]) {
	                [Phone loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"PhoneNumber"]) {
	                [Phone loadLabels:property.children];
	            }
				if ([property.name isEqualToString:@"Address"]) {
	                [Address loadLabels:property.children];
	            }
	        	[businessPartnerLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:businessPartnerLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Website = [[URI alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Website"]];
	m_Email = [[URI alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Email"]];
	m_FaxNumber = [[Phone alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"FaxNumber"]];
	m_PhoneNumber = [[Phone alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"PhoneNumber"]];
	m_Address = [[Address alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Address"]];
	m_BusinessPartnerName = [self getStringValueForSDMPropertyWithName:@"BusinessPartnerName"];
	m_BusinessPartnerType = [self getStringValueForSDMPropertyWithName:@"BusinessPartnerType"];
	m_BusinessPartnerID = [self getStringValueForSDMPropertyWithName:@"BusinessPartnerID"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_ContactPersonsQuery = [self getRelatedLinkForNavigationName:@"ContactPersons"];
    m_MediaCollectionQuery = [self getRelatedLinkForNavigationName:@"MediaCollection"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"ContactPersons"];
    m_ContactPersons = [ContactPerson createContactPersonEntriesForSDMEntries:entries];

    entries = [self getInlinedRelatedEntriesForNavigationName:@"MediaCollection"];
    m_MediaCollection = [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createBusinessPartnerEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        BusinessPartner *businessPartnerObject = [[BusinessPartner alloc] initWithSDMEntry:entry];
        [entries addObject:businessPartnerObject];
    }
    return entries;
}


+ (NSMutableArray *)parseBusinessPartnerEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:businessPartnerEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [BusinessPartner createBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedBusinessPartnerEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:businessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [BusinessPartner createBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (BusinessPartner *)parseBusinessPartnerEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *businessPartnerEntries = [BusinessPartner parseBusinessPartnerEntriesWithData:aData error:error];
    if (!businessPartnerEntries) {
    	return nil;
    }
    return (BusinessPartner *)[BusinessPartner getFirstObjectFromArray:businessPartnerEntries];
}

+ (BusinessPartner *)parseExpandedBusinessPartnerEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:businessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *businessPartnerEntries = [BusinessPartner createBusinessPartnerEntriesForSDMEntries:sdmEntries];
	return (BusinessPartner *)[BusinessPartner getFirstObjectFromArray:businessPartnerEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadContactPersonsWithData:(NSData *)aData error:(NSError **)error
{
    self.ContactPersons = [ContactPerson parseContactPersonEntriesWithData:aData error:error];
    if (!self.ContactPersons) {
    	return NO;
    }
    return YES;
}

- (BOOL)loadMediaCollectionWithData:(NSData *)aData error:(NSError **)error
{
    self.MediaCollection = [MediaForBusinessPartner parseMediaForBusinessPartnerEntriesWithData:aData error:error];
    if (!self.MediaCollection) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - Material
@implementation Material 

@synthesize Quantity = m_Quantity;
@synthesize UoM = m_UoM;
@synthesize Plant = m_Plant;
@synthesize Description = m_Description;
@synthesize MaterialNumber = m_MaterialNumber;
@synthesize EANCategory = m_EANCategory;
@synthesize EANCode = m_EANCode;
@synthesize SalesOrganization = m_SalesOrganization;
@synthesize MaterialGroup = m_MaterialGroup;
@synthesize MediaCollectionQuery = m_MediaCollectionQuery;
@synthesize MediaCollection = m_MediaCollection;

static NSMutableDictionary *materialLabels = nil;
static SDMODataEntitySchema *materialEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:materialEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.MediaCollection count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.MediaCollection] forKey:@"MediaCollection"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.Quantity forSDMPropertyWithName:@"Quantity" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.UoM forSDMPropertyWithName:@"UoM" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Plant forSDMPropertyWithName:@"Plant" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Description forSDMPropertyWithName:@"Description" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MaterialNumber forSDMPropertyWithName:@"MaterialNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.EANCategory forSDMPropertyWithName:@"EANCategory" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.EANCode forSDMPropertyWithName:@"EANCode" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SalesOrganization forSDMPropertyWithName:@"SalesOrganization" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MaterialGroup forSDMPropertyWithName:@"MaterialGroup" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"Materials" workspaceOfCollection:nil];
    materialEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"Materials" andService:aService];
    	if (properties) {    
	    	materialLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[materialLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:materialLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Quantity = [self getIntValueForSDMPropertyWithName:@"Quantity"];
	m_UoM = [self getStringValueForSDMPropertyWithName:@"UoM"];
	m_Plant = [self getStringValueForSDMPropertyWithName:@"Plant"];
	m_Description = [self getStringValueForSDMPropertyWithName:@"Description"];
	m_MaterialNumber = [self getStringValueForSDMPropertyWithName:@"MaterialNumber"];
	m_EANCategory = [self getStringValueForSDMPropertyWithName:@"EANCategory"];
	m_EANCode = [self getStringValueForSDMPropertyWithName:@"EANCode"];
	m_SalesOrganization = [self getStringValueForSDMPropertyWithName:@"SalesOrganization"];
	m_MaterialGroup = [self getStringValueForSDMPropertyWithName:@"MaterialGroup"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_MediaCollectionQuery = [self getRelatedLinkForNavigationName:@"MediaCollection"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"MediaCollection"];
    m_MediaCollection = [MediaForMaterials createMediaForMaterialsEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createMaterialEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        Material *materialObject = [[Material alloc] initWithSDMEntry:entry];
        [entries addObject:materialObject];
    }
    return entries;
}


+ (NSMutableArray *)parseMaterialEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:materialEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [Material createMaterialEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedMaterialEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:materialEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [Material createMaterialEntriesForSDMEntries:sdmEntries];
}

+ (Material *)parseMaterialEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *materialEntries = [Material parseMaterialEntriesWithData:aData error:error];
    if (!materialEntries) {
    	return nil;
    }
    return (Material *)[Material getFirstObjectFromArray:materialEntries];
}

+ (Material *)parseExpandedMaterialEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:materialEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *materialEntries = [Material createMaterialEntriesForSDMEntries:sdmEntries];
	return (Material *)[Material getFirstObjectFromArray:materialEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadMediaCollectionWithData:(NSData *)aData error:(NSError **)error
{
    self.MediaCollection = [MediaForMaterials parseMediaForMaterialsEntriesWithData:aData error:error];
    if (!self.MediaCollection) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - SalesDocument
@implementation SalesDocument 

@synthesize Status = m_Status;
@synthesize CustomerPurchaseOrderNumber = m_CustomerPurchaseOrderNumber;
@synthesize RequestedDeliveryDate = m_RequestedDeliveryDate;
@synthesize Currency = m_Currency;
@synthesize NetValue = m_NetValue;
@synthesize Division = m_Division;
@synthesize DistributionChannel = m_DistributionChannel;
@synthesize SalesOrganization = m_SalesOrganization;
@synthesize CustomerID = m_CustomerID;
@synthesize DocumentDate = m_DocumentDate;
@synthesize Description = m_Description;
@synthesize OrderType = m_OrderType;
@synthesize OrderID = m_OrderID;
@synthesize ItemsQuery = m_ItemsQuery;
@synthesize Items = m_Items;

static NSMutableDictionary *salesDocumentLabels = nil;
static SDMODataEntitySchema *salesDocumentEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:salesDocumentEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.Items count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.Items] forKey:@"Items"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
		[self.Status setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Status" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CustomerPurchaseOrderNumber forSDMPropertyWithName:@"CustomerPurchaseOrderNumber" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.RequestedDeliveryDate forSDMPropertyWithName:@"RequestedDeliveryDate" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Currency forSDMPropertyWithName:@"Currency" error:&innerError];
    	[BaseODataObject setDecimalValueForSDMEntry:m_SDMEntry withValue:self.NetValue forSDMPropertyWithName:@"NetValue" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Division forSDMPropertyWithName:@"Division" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.DistributionChannel forSDMPropertyWithName:@"DistributionChannel" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.SalesOrganization forSDMPropertyWithName:@"SalesOrganization" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.CustomerID forSDMPropertyWithName:@"CustomerID" error:&innerError];
    	[BaseODataObject setDateTimeValueForSDMEntry:m_SDMEntry withValue:self.DocumentDate forSDMPropertyWithName:@"DocumentDate" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Description forSDMPropertyWithName:@"Description" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OrderType forSDMPropertyWithName:@"OrderType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OrderID forSDMPropertyWithName:@"OrderID" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"SalesDocuments" workspaceOfCollection:nil];
    salesDocumentEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"SalesDocuments" andService:aService];
    	if (properties) {    
	    	salesDocumentLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
				if ([property.name isEqualToString:@"Status"]) {
	                [DocumentStatus loadLabels:property.children];
	            }
	        	[salesDocumentLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:salesDocumentLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Status = [[DocumentStatus alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Status"]];
	m_CustomerPurchaseOrderNumber = [self getStringValueForSDMPropertyWithName:@"CustomerPurchaseOrderNumber"];
	m_RequestedDeliveryDate = [self getDateTimeValueForSDMPropertyWithName:@"RequestedDeliveryDate"];
	m_Currency = [self getStringValueForSDMPropertyWithName:@"Currency"];
	m_NetValue = [self getDecimalValueForSDMPropertyWithName:@"NetValue"];
	m_Division = [self getStringValueForSDMPropertyWithName:@"Division"];
	m_DistributionChannel = [self getStringValueForSDMPropertyWithName:@"DistributionChannel"];
	m_SalesOrganization = [self getStringValueForSDMPropertyWithName:@"SalesOrganization"];
	m_CustomerID = [self getStringValueForSDMPropertyWithName:@"CustomerID"];
	m_DocumentDate = [self getDateTimeValueForSDMPropertyWithName:@"DocumentDate"];
	m_Description = [self getStringValueForSDMPropertyWithName:@"Description"];
	m_OrderType = [self getStringValueForSDMPropertyWithName:@"OrderType"];
	m_OrderID = [self getStringValueForSDMPropertyWithName:@"OrderID"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_ItemsQuery = [self getRelatedLinkForNavigationName:@"Items"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"Items"];
    m_Items = [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createSalesDocumentEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        SalesDocument *salesDocumentObject = [[SalesDocument alloc] initWithSDMEntry:entry];
        [entries addObject:salesDocumentObject];
    }
    return entries;
}


+ (NSMutableArray *)parseSalesDocumentEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:salesDocumentEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocument createSalesDocumentEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedSalesDocumentEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocument createSalesDocumentEntriesForSDMEntries:sdmEntries];
}

+ (SalesDocument *)parseSalesDocumentEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *salesDocumentEntries = [SalesDocument parseSalesDocumentEntriesWithData:aData error:error];
    if (!salesDocumentEntries) {
    	return nil;
    }
    return (SalesDocument *)[SalesDocument getFirstObjectFromArray:salesDocumentEntries];
}

+ (SalesDocument *)parseExpandedSalesDocumentEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *salesDocumentEntries = [SalesDocument createSalesDocumentEntriesForSDMEntries:sdmEntries];
	return (SalesDocument *)[SalesDocument getFirstObjectFromArray:salesDocumentEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadItemsWithData:(NSData *)aData error:(NSError **)error
{
    self.Items = [SalesDocumentItem parseSalesDocumentItemEntriesWithData:aData error:error];
    if (!self.Items) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - SalesDocumentItem
@implementation SalesDocumentItem 

@synthesize Status = m_Status;
@synthesize NetValue = m_NetValue;
@synthesize NetPrice = m_NetPrice;
@synthesize UoM = m_UoM;
@synthesize Quantity = m_Quantity;
@synthesize Plant = m_Plant;
@synthesize Description = m_Description;
@synthesize Material = m_Material;
@synthesize ItemNumber = m_ItemNumber;
@synthesize OrderID = m_OrderID;
@synthesize SalesDocumentQuery = m_SalesDocumentQuery;
@synthesize SalesDocument = m_SalesDocument;

static NSMutableDictionary *salesDocumentItemLabels = nil;
static SDMODataEntitySchema *salesDocumentItemEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:salesDocumentItemEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.SalesDocument count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.SalesDocument] forKey:@"SalesDocument"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
		[self.Status setComplexTypePropertiesToSDMEntry:m_SDMEntry complexTypePropertyName:@"Status" error:&innerError];
    	[BaseODataObject setDecimalValueForSDMEntry:m_SDMEntry withValue:self.NetValue forSDMPropertyWithName:@"NetValue" error:&innerError];
    	[BaseODataObject setDecimalValueForSDMEntry:m_SDMEntry withValue:self.NetPrice forSDMPropertyWithName:@"NetPrice" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.UoM forSDMPropertyWithName:@"UoM" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.Quantity forSDMPropertyWithName:@"Quantity" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Plant forSDMPropertyWithName:@"Plant" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Description forSDMPropertyWithName:@"Description" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Material forSDMPropertyWithName:@"Material" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ItemNumber forSDMPropertyWithName:@"ItemNumber" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.OrderID forSDMPropertyWithName:@"OrderID" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"SalesDocumentItems" workspaceOfCollection:nil];
    salesDocumentItemEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"SalesDocumentItems" andService:aService];
    	if (properties) {    
	    	salesDocumentItemLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
				if ([property.name isEqualToString:@"Status"]) {
	                [DocumentStatus loadLabels:property.children];
	            }
	        	[salesDocumentItemLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:salesDocumentItemLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Status = [[DocumentStatus alloc] initWithSDMDictionary:[self getDictionaryForComplexTypeProperty:@"Status"]];
	m_NetValue = [self getDecimalValueForSDMPropertyWithName:@"NetValue"];
	m_NetPrice = [self getDecimalValueForSDMPropertyWithName:@"NetPrice"];
	m_UoM = [self getStringValueForSDMPropertyWithName:@"UoM"];
	m_Quantity = [self getIntValueForSDMPropertyWithName:@"Quantity"];
	m_Plant = [self getStringValueForSDMPropertyWithName:@"Plant"];
	m_Description = [self getStringValueForSDMPropertyWithName:@"Description"];
	m_Material = [self getStringValueForSDMPropertyWithName:@"Material"];
	m_ItemNumber = [self getStringValueForSDMPropertyWithName:@"ItemNumber"];
	m_OrderID = [self getStringValueForSDMPropertyWithName:@"OrderID"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_SalesDocumentQuery = [self getRelatedLinkForNavigationName:@"SalesDocument"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"SalesDocument"];
    m_SalesDocument = [SalesDocument createSalesDocumentEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createSalesDocumentItemEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        SalesDocumentItem *salesDocumentItemObject = [[SalesDocumentItem alloc] initWithSDMEntry:entry];
        [entries addObject:salesDocumentItemObject];
    }
    return entries;
}


+ (NSMutableArray *)parseSalesDocumentItemEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:salesDocumentItemEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedSalesDocumentItemEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentItemEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:sdmEntries];
}

+ (SalesDocumentItem *)parseSalesDocumentItemEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *salesDocumentItemEntries = [SalesDocumentItem parseSalesDocumentItemEntriesWithData:aData error:error];
    if (!salesDocumentItemEntries) {
    	return nil;
    }
    return (SalesDocumentItem *)[SalesDocumentItem getFirstObjectFromArray:salesDocumentItemEntries];
}

+ (SalesDocumentItem *)parseExpandedSalesDocumentItemEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:salesDocumentItemEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *salesDocumentItemEntries = [SalesDocumentItem createSalesDocumentItemEntriesForSDMEntries:sdmEntries];
	return (SalesDocumentItem *)[SalesDocumentItem getFirstObjectFromArray:salesDocumentItemEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadSalesDocumentWithData:(NSData *)aData error:(NSError **)error
{
    self.SalesDocument = [SalesDocument parseSalesDocumentEntriesWithData:aData error:error];
    if (!self.SalesDocument) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - MediaForBusinessPartner
@implementation MediaForBusinessPartner 

@synthesize BusinessPartnerID = m_BusinessPartnerID;
@synthesize FileSize = m_FileSize;
@synthesize FileName = m_FileName;
@synthesize MimeType = m_MimeType;
@synthesize MediaID = m_MediaID;
@synthesize mediaLinkRead = m_mediaLinkRead;
@synthesize mediaLinkEdit = m_mediaLinkEdit;

static NSMutableDictionary *mediaForBusinessPartnerLabels = nil;
static SDMODataEntitySchema *mediaForBusinessPartnerEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:mediaForBusinessPartnerEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.BusinessPartnerID forSDMPropertyWithName:@"BusinessPartnerID" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.FileSize forSDMPropertyWithName:@"FileSize" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FileName forSDMPropertyWithName:@"FileName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MimeType forSDMPropertyWithName:@"MimeType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MediaID forSDMPropertyWithName:@"MediaID" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"MediaCollectionForBusinessPartner" workspaceOfCollection:nil];
    mediaForBusinessPartnerEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"MediaCollectionForBusinessPartner" andService:aService];
    	if (properties) {    
	    	mediaForBusinessPartnerLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[mediaForBusinessPartnerLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:mediaForBusinessPartnerLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_BusinessPartnerID = [self getStringValueForSDMPropertyWithName:@"BusinessPartnerID"];
	m_FileSize = [self getIntValueForSDMPropertyWithName:@"FileSize"];
	m_FileName = [self getStringValueForSDMPropertyWithName:@"FileName"];
	m_MimeType = [self getStringValueForSDMPropertyWithName:@"MimeType"];
	m_MediaID = [self getStringValueForSDMPropertyWithName:@"MediaID"];
}

- (void)loadMediaLinkProperties
{
	[super loadMediaLinkProperties];
	m_mediaLinkRead = [self getMediaLinkForReading];
	m_mediaLinkEdit = [self getMediaLinkForEditing];
}

+ (NSMutableArray *)createMediaForBusinessPartnerEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        MediaForBusinessPartner *mediaForBusinessPartnerObject = [[MediaForBusinessPartner alloc] initWithSDMEntry:entry];
        [entries addObject:mediaForBusinessPartnerObject];
    }
    return entries;
}


+ (NSMutableArray *)parseMediaForBusinessPartnerEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:mediaForBusinessPartnerEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedMediaForBusinessPartnerEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForBusinessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:sdmEntries];
}

+ (MediaForBusinessPartner *)parseMediaForBusinessPartnerEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *mediaForBusinessPartnerEntries = [MediaForBusinessPartner parseMediaForBusinessPartnerEntriesWithData:aData error:error];
    if (!mediaForBusinessPartnerEntries) {
    	return nil;
    }
    return (MediaForBusinessPartner *)[MediaForBusinessPartner getFirstObjectFromArray:mediaForBusinessPartnerEntries];
}

+ (MediaForBusinessPartner *)parseExpandedMediaForBusinessPartnerEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForBusinessPartnerEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *mediaForBusinessPartnerEntries = [MediaForBusinessPartner createMediaForBusinessPartnerEntriesForSDMEntries:sdmEntries];
	return (MediaForBusinessPartner *)[MediaForBusinessPartner getFirstObjectFromArray:mediaForBusinessPartnerEntries];
}



@end

#pragma mark - UserSetting
@implementation UserSetting 

@synthesize EmployeeID = m_EmployeeID;

static NSMutableDictionary *userSettingLabels = nil;
static SDMODataEntitySchema *userSettingEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:userSettingEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.EmployeeID forSDMPropertyWithName:@"EmployeeID" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"UserSettingCollection" workspaceOfCollection:nil];
    userSettingEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"UserSettingCollection" andService:aService];
    	if (properties) {    
	    	userSettingLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[userSettingLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:userSettingLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_EmployeeID = [self getStringValueForSDMPropertyWithName:@"EmployeeID"];
}

+ (NSMutableArray *)createUserSettingEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        UserSetting *userSettingObject = [[UserSetting alloc] initWithSDMEntry:entry];
        [entries addObject:userSettingObject];
    }
    return entries;
}


+ (NSMutableArray *)parseUserSettingEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:userSettingEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [UserSetting createUserSettingEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedUserSettingEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:userSettingEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [UserSetting createUserSettingEntriesForSDMEntries:sdmEntries];
}

+ (UserSetting *)parseUserSettingEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *userSettingEntries = [UserSetting parseUserSettingEntriesWithData:aData error:error];
    if (!userSettingEntries) {
    	return nil;
    }
    return (UserSetting *)[UserSetting getFirstObjectFromArray:userSettingEntries];
}

+ (UserSetting *)parseExpandedUserSettingEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:userSettingEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *userSettingEntries = [UserSetting createUserSettingEntriesForSDMEntries:sdmEntries];
	return (UserSetting *)[UserSetting getFirstObjectFromArray:userSettingEntries];
}



@end

#pragma mark - MaterialGroup
@implementation MaterialGroup 

@synthesize Description = m_Description;
@synthesize MaterialGroupID = m_MaterialGroupID;
@synthesize MaterialSetQuery = m_MaterialSetQuery;
@synthesize MaterialSet = m_MaterialSet;

static NSMutableDictionary *materialGroupLabels = nil;
static SDMODataEntitySchema *materialGroupEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:materialGroupEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}

- (NSMutableDictionary *)getSDMEntriesForNavigationProperties
{
    NSMutableDictionary *dictionary = [NSMutableDictionary dictionary];
    if ([self.MaterialSet count] > 0) {
        [dictionary setObject:[self createSDMEntriesForNavigationPropertyEntries:self.MaterialSet] forKey:@"MaterialSet"];
    }
    return dictionary;
}


- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.Description forSDMPropertyWithName:@"Description" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MaterialGroupID forSDMPropertyWithName:@"MaterialGroupID" error:&innerError];
        [self addRelativeLinksToSDMEntryFromDictionary:[self getSDMEntriesForNavigationProperties]];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"MaterialGroups" workspaceOfCollection:nil];
    materialGroupEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"MaterialGroups" andService:aService];
    	if (properties) {    
	    	materialGroupLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[materialGroupLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:materialGroupLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_Description = [self getStringValueForSDMPropertyWithName:@"Description"];
	m_MaterialGroupID = [self getStringValueForSDMPropertyWithName:@"MaterialGroupID"];
}

- (void)loadNavigationPropertyQueries
{
    [super loadNavigationPropertyQueries];
    m_MaterialSetQuery = [self getRelatedLinkForNavigationName:@"MaterialSet"];
}

- (void)loadNavigationPropertyData
{
    [super loadNavigationPropertyData];
    
    NSMutableArray *entries = nil;

    entries = [self getInlinedRelatedEntriesForNavigationName:@"MaterialSet"];
    m_MaterialSet = [Material createMaterialEntriesForSDMEntries:entries];

}

+ (NSMutableArray *)createMaterialGroupEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        MaterialGroup *materialGroupObject = [[MaterialGroup alloc] initWithSDMEntry:entry];
        [entries addObject:materialGroupObject];
    }
    return entries;
}


+ (NSMutableArray *)parseMaterialGroupEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:materialGroupEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MaterialGroup createMaterialGroupEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedMaterialGroupEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:materialGroupEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MaterialGroup createMaterialGroupEntriesForSDMEntries:sdmEntries];
}

+ (MaterialGroup *)parseMaterialGroupEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *materialGroupEntries = [MaterialGroup parseMaterialGroupEntriesWithData:aData error:error];
    if (!materialGroupEntries) {
    	return nil;
    }
    return (MaterialGroup *)[MaterialGroup getFirstObjectFromArray:materialGroupEntries];
}

+ (MaterialGroup *)parseExpandedMaterialGroupEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:materialGroupEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *materialGroupEntries = [MaterialGroup createMaterialGroupEntriesForSDMEntries:sdmEntries];
	return (MaterialGroup *)[MaterialGroup getFirstObjectFromArray:materialGroupEntries];
}


#pragma mark Entity Navigation Property loading methods
- (BOOL)loadMaterialSetWithData:(NSData *)aData error:(NSError **)error
{
    self.MaterialSet = [Material parseMaterialEntriesWithData:aData error:error];
    if (!self.MaterialSet) {
    	return NO;
    }
    return YES;
}


@end

#pragma mark - MediaForContactPerson
@implementation MediaForContactPerson 

@synthesize RelatedPartnerID = m_RelatedPartnerID;
@synthesize FileSize = m_FileSize;
@synthesize FileName = m_FileName;
@synthesize MimeType = m_MimeType;
@synthesize MediaID = m_MediaID;
@synthesize ContactPersonID = m_ContactPersonID;
@synthesize mediaLinkRead = m_mediaLinkRead;
@synthesize mediaLinkEdit = m_mediaLinkEdit;

static NSMutableDictionary *mediaForContactPersonLabels = nil;
static SDMODataEntitySchema *mediaForContactPersonEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:mediaForContactPersonEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.RelatedPartnerID forSDMPropertyWithName:@"RelatedPartnerID" error:&innerError];
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.FileSize forSDMPropertyWithName:@"FileSize" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FileName forSDMPropertyWithName:@"FileName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MimeType forSDMPropertyWithName:@"MimeType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MediaID forSDMPropertyWithName:@"MediaID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.ContactPersonID forSDMPropertyWithName:@"ContactPersonID" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"MediaForContactPersonSet" workspaceOfCollection:nil];
    mediaForContactPersonEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"MediaForContactPersonSet" andService:aService];
    	if (properties) {    
	    	mediaForContactPersonLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[mediaForContactPersonLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:mediaForContactPersonLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_RelatedPartnerID = [self getStringValueForSDMPropertyWithName:@"RelatedPartnerID"];
	m_FileSize = [self getIntValueForSDMPropertyWithName:@"FileSize"];
	m_FileName = [self getStringValueForSDMPropertyWithName:@"FileName"];
	m_MimeType = [self getStringValueForSDMPropertyWithName:@"MimeType"];
	m_MediaID = [self getStringValueForSDMPropertyWithName:@"MediaID"];
	m_ContactPersonID = [self getStringValueForSDMPropertyWithName:@"ContactPersonID"];
}

- (void)loadMediaLinkProperties
{
	[super loadMediaLinkProperties];
	m_mediaLinkRead = [self getMediaLinkForReading];
	m_mediaLinkEdit = [self getMediaLinkForEditing];
}

+ (NSMutableArray *)createMediaForContactPersonEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        MediaForContactPerson *mediaForContactPersonObject = [[MediaForContactPerson alloc] initWithSDMEntry:entry];
        [entries addObject:mediaForContactPersonObject];
    }
    return entries;
}


+ (NSMutableArray *)parseMediaForContactPersonEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:mediaForContactPersonEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForContactPerson createMediaForContactPersonEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedMediaForContactPersonEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForContactPersonEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForContactPerson createMediaForContactPersonEntriesForSDMEntries:sdmEntries];
}

+ (MediaForContactPerson *)parseMediaForContactPersonEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *mediaForContactPersonEntries = [MediaForContactPerson parseMediaForContactPersonEntriesWithData:aData error:error];
    if (!mediaForContactPersonEntries) {
    	return nil;
    }
    return (MediaForContactPerson *)[MediaForContactPerson getFirstObjectFromArray:mediaForContactPersonEntries];
}

+ (MediaForContactPerson *)parseExpandedMediaForContactPersonEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForContactPersonEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *mediaForContactPersonEntries = [MediaForContactPerson createMediaForContactPersonEntriesForSDMEntries:sdmEntries];
	return (MediaForContactPerson *)[MediaForContactPerson getFirstObjectFromArray:mediaForContactPersonEntries];
}



@end

#pragma mark - MediaForMaterials
@implementation MediaForMaterials 

@synthesize FileSize = m_FileSize;
@synthesize FileName = m_FileName;
@synthesize MimeType = m_MimeType;
@synthesize MediaID = m_MediaID;
@synthesize MaterialNumber = m_MaterialNumber;
@synthesize mediaLinkRead = m_mediaLinkRead;
@synthesize mediaLinkEdit = m_mediaLinkEdit;

static NSMutableDictionary *mediaForMaterialsLabels = nil;
static SDMODataEntitySchema *mediaForMaterialsEntitySchema = nil;

- (id)init
{
    self = [super init];
    if (self) {
        m_SDMEntry = [BaseEntityType createEmptySDMODataEntryWithSchema:mediaForMaterialsEntitySchema error:nil];
        if (!m_SDMEntry) {
            return nil;
        }        
        m_properties = nil;
        m_baseUrl = nil;
    }
    return self;
}



- (SDMODataEntry *)buildSDMEntryFromPropertiesAndReturnError:(NSError **)error
{
    if (m_SDMEntry) {
        NSError *innerError = nil;
    	[BaseODataObject setIntValueForSDMEntry:m_SDMEntry withValue:self.FileSize forSDMPropertyWithName:@"FileSize" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.FileName forSDMPropertyWithName:@"FileName" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MimeType forSDMPropertyWithName:@"MimeType" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MediaID forSDMPropertyWithName:@"MediaID" error:&innerError];
    	[BaseODataObject setStringValueForSDMEntry:m_SDMEntry withValue:self.MaterialNumber forSDMPropertyWithName:@"MaterialNumber" error:&innerError];
        if (innerError) {
            if (error) {
                *error = innerError;
            }
            return nil;
        }
	}
    return m_SDMEntry;
}

+ (void)loadEntitySchema:(SDMODataServiceDocument *)aService
{
    SDMODataCollection *collectionSchema = [aService.schema getCollectionByName:@"MediaForMaterialsSet" workspaceOfCollection:nil];
    mediaForMaterialsEntitySchema = collectionSchema.entitySchema;
}

+ (void)loadLabels:(SDMODataServiceDocument *)aService
{
		NSMutableDictionary *properties = [BaseODataObject getSchemaPropertiesFromCollection:@"MediaForMaterialsSet" andService:aService];
    	if (properties) {    
	    	mediaForMaterialsLabels = [NSMutableDictionary dictionary];
	    	for (SDMODataPropertyInfo *property in [properties allValues]) {
	        	[mediaForMaterialsLabels setValue:property.label forKey:property.name];
	    	}
	    }
	    else {
        	LOGERROR(@"Failed to load SAP labels from service metadata");
    	}
}


+ (NSString *)getLabelForProperty:(NSString *)aPropertyName
{
    return [BaseODataObject getLabelFromDictionary:mediaForMaterialsLabels forProperty:aPropertyName];
}

- (void)loadProperties
{
    [super loadProperties];
	m_FileSize = [self getIntValueForSDMPropertyWithName:@"FileSize"];
	m_FileName = [self getStringValueForSDMPropertyWithName:@"FileName"];
	m_MimeType = [self getStringValueForSDMPropertyWithName:@"MimeType"];
	m_MediaID = [self getStringValueForSDMPropertyWithName:@"MediaID"];
	m_MaterialNumber = [self getStringValueForSDMPropertyWithName:@"MaterialNumber"];
}

- (void)loadMediaLinkProperties
{
	[super loadMediaLinkProperties];
	m_mediaLinkRead = [self getMediaLinkForReading];
	m_mediaLinkEdit = [self getMediaLinkForEditing];
}

+ (NSMutableArray *)createMediaForMaterialsEntriesForSDMEntries:(NSMutableArray *)sdmEntries
{
    NSMutableArray *entries = [NSMutableArray array];
    for (SDMODataEntry *entry in sdmEntries) {
        MediaForMaterials *mediaForMaterialsObject = [[MediaForMaterials alloc] initWithSDMEntry:entry];
        [entries addObject:mediaForMaterialsObject];
    }
    return entries;
}


+ (NSMutableArray *)parseMediaForMaterialsEntriesWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getSDMEntriesForEntitySchema:mediaForMaterialsEntitySchema andData:aData error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForMaterials createMediaForMaterialsEntriesForSDMEntries:sdmEntries];
}

+ (NSMutableArray *)parseExpandedMediaForMaterialsEntriesWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
    NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForMaterialsEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    if (!sdmEntries) {
    	return nil;
    }
	return [MediaForMaterials createMediaForMaterialsEntriesForSDMEntries:sdmEntries];
}

+ (MediaForMaterials *)parseMediaForMaterialsEntryWithData:(NSData *)aData error:(NSError **)error
{
    NSMutableArray *mediaForMaterialsEntries = [MediaForMaterials parseMediaForMaterialsEntriesWithData:aData error:error];
    if (!mediaForMaterialsEntries) {
    	return nil;
    }
    return (MediaForMaterials *)[MediaForMaterials getFirstObjectFromArray:mediaForMaterialsEntries];
}

+ (MediaForMaterials *)parseExpandedMediaForMaterialsEntryWithData:(NSData *)aData andServiceDocument:(SDMODataServiceDocument *)aServiceDocument error:(NSError **)error
{
	NSMutableArray *sdmEntries = [BaseEntityType getExpandedSDMEntriesForEntitySchema:mediaForMaterialsEntitySchema andData:aData andServiceDocument:aServiceDocument error:error];
    NSMutableArray *mediaForMaterialsEntries = [MediaForMaterials createMediaForMaterialsEntriesForSDMEntries:sdmEntries];
	return (MediaForMaterials *)[MediaForMaterials getFirstObjectFromArray:mediaForMaterialsEntries];
}



@end


#pragma mark - ECCSALESDATA_SRV Service Proxy


@implementation ECCSALESDATA_SRVService

@synthesize ContactPersonsQuery = m_ContactPersonsQuery;
@synthesize BusinessPartnersQuery = m_BusinessPartnersQuery;
@synthesize MaterialsQuery = m_MaterialsQuery;
@synthesize SalesDocumentsQuery = m_SalesDocumentsQuery;
@synthesize SalesDocumentItemsQuery = m_SalesDocumentItemsQuery;
@synthesize MediaCollectionForBusinessPartnerQuery = m_MediaCollectionForBusinessPartnerQuery;
@synthesize UserSettingCollectionQuery = m_UserSettingCollectionQuery;
@synthesize MaterialGroupsQuery = m_MaterialGroupsQuery;
@synthesize MediaForContactPersonSetQuery = m_MediaForContactPersonSetQuery;
@synthesize MediaForMaterialsSetQuery = m_MediaForMaterialsSetQuery;

- (NSString *)getServiceDocumentFilename
{
	return ECCSALESDATA_SRV_SERVICE_DOCUMENT;
}

- (NSString *)getServiceMetadataFilename
{
	return ECCSALESDATA_SRV_SERVICE_METADATA;
}

- (void)loadEntitySetQueries
{
	[super loadEntitySetQueries];
    m_ContactPersonsQuery = [self getQueryForRelativePath:@"ContactPersons"];
    m_BusinessPartnersQuery = [self getQueryForRelativePath:@"BusinessPartners"];
    m_MaterialsQuery = [self getQueryForRelativePath:@"Materials"];
    m_SalesDocumentsQuery = [self getQueryForRelativePath:@"SalesDocuments"];
    m_SalesDocumentItemsQuery = [self getQueryForRelativePath:@"SalesDocumentItems"];
    m_MediaCollectionForBusinessPartnerQuery = [self getQueryForRelativePath:@"MediaCollectionForBusinessPartner"];
    m_UserSettingCollectionQuery = [self getQueryForRelativePath:@"UserSettingCollection"];
    m_MaterialGroupsQuery = [self getQueryForRelativePath:@"MaterialGroups"];
    m_MediaForContactPersonSetQuery = [self getQueryForRelativePath:@"MediaForContactPersonSet"];
    m_MediaForMaterialsSetQuery = [self getQueryForRelativePath:@"MediaForMaterialsSet"];
}

- (void)loadEntitySchemaForAllEntityTypes
{
    [super loadEntitySchemaForAllEntityTypes];
    [ContactPerson loadEntitySchema:m_serviceDocument];
    [BusinessPartner loadEntitySchema:m_serviceDocument];
    [Material loadEntitySchema:m_serviceDocument];
    [SalesDocument loadEntitySchema:m_serviceDocument];
    [SalesDocumentItem loadEntitySchema:m_serviceDocument];
    [MediaForBusinessPartner loadEntitySchema:m_serviceDocument];
    [UserSetting loadEntitySchema:m_serviceDocument];
    [MaterialGroup loadEntitySchema:m_serviceDocument];
    [MediaForContactPerson loadEntitySchema:m_serviceDocument];
    [MediaForMaterials loadEntitySchema:m_serviceDocument];
}

- (void)loadLabels
{
    [super loadLabels];
    [ContactPerson loadLabels:m_serviceDocument];
    [BusinessPartner loadLabels:m_serviceDocument];
    [Material loadLabels:m_serviceDocument];
    [SalesDocument loadLabels:m_serviceDocument];
    [SalesDocumentItem loadLabels:m_serviceDocument];
    [MediaForBusinessPartner loadLabels:m_serviceDocument];
    [UserSetting loadLabels:m_serviceDocument];
    [MaterialGroup loadLabels:m_serviceDocument];
    [MediaForContactPerson loadLabels:m_serviceDocument];
    [MediaForMaterials loadLabels:m_serviceDocument];
}

 
#pragma mark Service Entity Set methods
- (NSMutableArray *)getContactPersonsWithData:(NSData *)aData error:(NSError **)error
{
	return [ContactPerson parseExpandedContactPersonEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getContactPersonsEntryQueryWithRelatedPartnerID:(NSString *)RelatedPartnerID andContactPersonID:(NSString *)ContactPersonID
{
	RelatedPartnerID = [ODataQuery encodeURLParameter:RelatedPartnerID];
	ContactPersonID = [ODataQuery encodeURLParameter:ContactPersonID];
	NSString *relativePath = [NSString stringWithFormat:@"ContactPersons(RelatedPartnerID=%@,ContactPersonID=%@)", RelatedPartnerID, ContactPersonID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getContactPersonsEntryQueryTypedWithRelatedPartnerID:(NSString *)RelatedPartnerID andContactPersonID:(NSString *)ContactPersonID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *RelatedPartnerIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:RelatedPartnerID]];
	NSString *ContactPersonIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ContactPersonID]];
	NSString *relativePath = [NSString stringWithFormat:@"ContactPersons(RelatedPartnerID=%@,ContactPersonID=%@)", RelatedPartnerIDUri, ContactPersonIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ContactPerson *)getContactPersonsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [ContactPerson parseExpandedContactPersonEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getBusinessPartnersWithData:(NSData *)aData error:(NSError **)error
{
	return [BusinessPartner parseExpandedBusinessPartnerEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getBusinessPartnersEntryQueryWithBusinessPartnerID:(NSString *)BusinessPartnerID
{
	BusinessPartnerID = [ODataQuery encodeURLParameter:BusinessPartnerID];
	NSString *relativePath = [NSString stringWithFormat:@"BusinessPartners(BusinessPartnerID=%@)", BusinessPartnerID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getBusinessPartnersEntryQueryTypedWithBusinessPartnerID:(NSString *)BusinessPartnerID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *BusinessPartnerIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:BusinessPartnerID]];
	NSString *relativePath = [NSString stringWithFormat:@"BusinessPartners(BusinessPartnerID=%@)", BusinessPartnerIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (BusinessPartner *)getBusinessPartnersEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [BusinessPartner parseExpandedBusinessPartnerEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getMaterialsWithData:(NSData *)aData error:(NSError **)error
{
	return [Material parseExpandedMaterialEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getMaterialsEntryQueryWithMaterialNumber:(NSString *)MaterialNumber
{
	MaterialNumber = [ODataQuery encodeURLParameter:MaterialNumber];
	NSString *relativePath = [NSString stringWithFormat:@"Materials(MaterialNumber=%@)", MaterialNumber];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getMaterialsEntryQueryTypedWithMaterialNumber:(NSString *)MaterialNumber
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *MaterialNumberUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MaterialNumber]];
	NSString *relativePath = [NSString stringWithFormat:@"Materials(MaterialNumber=%@)", MaterialNumberUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (Material *)getMaterialsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [Material parseExpandedMaterialEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getSalesDocumentsWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocument parseExpandedSalesDocumentEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getSalesDocumentsEntryQueryWithOrderID:(NSString *)OrderID
{
	OrderID = [ODataQuery encodeURLParameter:OrderID];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocuments(OrderID=%@)", OrderID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getSalesDocumentsEntryQueryTypedWithOrderID:(NSString *)OrderID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *OrderIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:OrderID]];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocuments(OrderID=%@)", OrderIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (SalesDocument *)getSalesDocumentsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocument parseExpandedSalesDocumentEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getSalesDocumentItemsWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocumentItem parseExpandedSalesDocumentItemEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getSalesDocumentItemsEntryQueryWithItemNumber:(NSString *)ItemNumber andOrderID:(NSString *)OrderID
{
	ItemNumber = [ODataQuery encodeURLParameter:ItemNumber];
	OrderID = [ODataQuery encodeURLParameter:OrderID];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocumentItems(ItemNumber=%@,OrderID=%@)", ItemNumber, OrderID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getSalesDocumentItemsEntryQueryTypedWithItemNumber:(NSString *)ItemNumber andOrderID:(NSString *)OrderID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *ItemNumberUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ItemNumber]];
	NSString *OrderIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:OrderID]];
	NSString *relativePath = [NSString stringWithFormat:@"SalesDocumentItems(ItemNumber=%@,OrderID=%@)", ItemNumberUri, OrderIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (SalesDocumentItem *)getSalesDocumentItemsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [SalesDocumentItem parseExpandedSalesDocumentItemEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getMediaCollectionForBusinessPartnerWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForBusinessPartner parseExpandedMediaForBusinessPartnerEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getMediaCollectionForBusinessPartnerEntryQueryWithBusinessPartnerID:(NSString *)BusinessPartnerID andMediaID:(NSString *)MediaID
{
	BusinessPartnerID = [ODataQuery encodeURLParameter:BusinessPartnerID];
	MediaID = [ODataQuery encodeURLParameter:MediaID];
	NSString *relativePath = [NSString stringWithFormat:@"MediaCollectionForBusinessPartner(BusinessPartnerID=%@,MediaID=%@)", BusinessPartnerID, MediaID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getMediaCollectionForBusinessPartnerEntryQueryTypedWithBusinessPartnerID:(NSString *)BusinessPartnerID andMediaID:(NSString *)MediaID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *BusinessPartnerIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:BusinessPartnerID]];
	NSString *MediaIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MediaID]];
	NSString *relativePath = [NSString stringWithFormat:@"MediaCollectionForBusinessPartner(BusinessPartnerID=%@,MediaID=%@)", BusinessPartnerIDUri, MediaIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (MediaForBusinessPartner *)getMediaCollectionForBusinessPartnerEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForBusinessPartner parseExpandedMediaForBusinessPartnerEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getUserSettingCollectionWithData:(NSData *)aData error:(NSError **)error
{
	return [UserSetting parseExpandedUserSettingEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getUserSettingCollectionEntryQueryWithEmployeeID:(NSString *)EmployeeID
{
	EmployeeID = [ODataQuery encodeURLParameter:EmployeeID];
	NSString *relativePath = [NSString stringWithFormat:@"UserSettingCollection(EmployeeID=%@)", EmployeeID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getUserSettingCollectionEntryQueryTypedWithEmployeeID:(NSString *)EmployeeID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *EmployeeIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:EmployeeID]];
	NSString *relativePath = [NSString stringWithFormat:@"UserSettingCollection(EmployeeID=%@)", EmployeeIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (UserSetting *)getUserSettingCollectionEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [UserSetting parseExpandedUserSettingEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getMaterialGroupsWithData:(NSData *)aData error:(NSError **)error
{
	return [MaterialGroup parseExpandedMaterialGroupEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getMaterialGroupsEntryQueryWithMaterialGroupID:(NSString *)MaterialGroupID
{
	MaterialGroupID = [ODataQuery encodeURLParameter:MaterialGroupID];
	NSString *relativePath = [NSString stringWithFormat:@"MaterialGroups(MaterialGroupID=%@)", MaterialGroupID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getMaterialGroupsEntryQueryTypedWithMaterialGroupID:(NSString *)MaterialGroupID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *MaterialGroupIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MaterialGroupID]];
	NSString *relativePath = [NSString stringWithFormat:@"MaterialGroups(MaterialGroupID=%@)", MaterialGroupIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (MaterialGroup *)getMaterialGroupsEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [MaterialGroup parseExpandedMaterialGroupEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getMediaForContactPersonSetWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForContactPerson parseExpandedMediaForContactPersonEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getMediaForContactPersonSetEntryQueryWithRelatedPartnerID:(NSString *)RelatedPartnerID andMediaID:(NSString *)MediaID andContactPersonID:(NSString *)ContactPersonID
{
	RelatedPartnerID = [ODataQuery encodeURLParameter:RelatedPartnerID];
	MediaID = [ODataQuery encodeURLParameter:MediaID];
	ContactPersonID = [ODataQuery encodeURLParameter:ContactPersonID];
	NSString *relativePath = [NSString stringWithFormat:@"MediaForContactPersonSet(RelatedPartnerID=%@,MediaID=%@,ContactPersonID=%@)", RelatedPartnerID, MediaID, ContactPersonID];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getMediaForContactPersonSetEntryQueryTypedWithRelatedPartnerID:(NSString *)RelatedPartnerID andMediaID:(NSString *)MediaID andContactPersonID:(NSString *)ContactPersonID
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *RelatedPartnerIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:RelatedPartnerID]];
	NSString *MediaIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MediaID]];
	NSString *ContactPersonIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:ContactPersonID]];
	NSString *relativePath = [NSString stringWithFormat:@"MediaForContactPersonSet(RelatedPartnerID=%@,MediaID=%@,ContactPersonID=%@)", RelatedPartnerIDUri, MediaIDUri, ContactPersonIDUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (MediaForContactPerson *)getMediaForContactPersonSetEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForContactPerson parseExpandedMediaForContactPersonEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (NSMutableArray *)getMediaForMaterialsSetWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForMaterials parseExpandedMediaForMaterialsEntriesWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}

- (ODataQuery *)getMediaForMaterialsSetEntryQueryWithMediaID:(NSString *)MediaID andMaterialNumber:(NSString *)MaterialNumber
{
	MediaID = [ODataQuery encodeURLParameter:MediaID];
	MaterialNumber = [ODataQuery encodeURLParameter:MaterialNumber];
	NSString *relativePath = [NSString stringWithFormat:@"MediaForMaterialsSet(MediaID=%@,MaterialNumber=%@)", MediaID, MaterialNumber];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (ODataQuery *)getMediaForMaterialsSetEntryQueryTypedWithMediaID:(NSString *)MediaID andMaterialNumber:(NSString *)MaterialNumber
{
	id <URITypeConverting> converter = [ODataURITypeConverter uniqueInstance];
	NSString *MediaIDUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MediaID]];
	NSString *MaterialNumberUri = [ODataQuery encodeURLParameter:[converter convertToEdmStringURI:MaterialNumber]];
	NSString *relativePath = [NSString stringWithFormat:@"MediaForMaterialsSet(MediaID=%@,MaterialNumber=%@)", MediaIDUri, MaterialNumberUri];
	ODataQuery *query = [self getQueryForRelativePath:relativePath];
	return query;
}

- (MediaForMaterials *)getMediaForMaterialsSetEntryWithData:(NSData *)aData error:(NSError **)error
{
	return [MediaForMaterials parseExpandedMediaForMaterialsEntryWithData:aData andServiceDocument:self.sdmServiceDocument error:error];
}



#pragma mark Service Function Import methods 

@end
