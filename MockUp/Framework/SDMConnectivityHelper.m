/*
 
 Auto-Generated by the SAP NetWeaver Gateway developer tool for Xcode, Version 2.5.300.0
  
 File: SDMConnectivityHelper.m
 Abstract: A helper class that helps with making OData requests to the server.
 
 
 */


#import "SDMConnectivityHelper.h"
#import "SDMRequestBuilder.h"
#import "SDMHttpRequest.h"
#import "SDMRequesting.h"

#define X_CSRF_TOKEN @"X-CSRF-TOKEN"
//#define SAP_XSRF_COOKIE_PREFIX @"sap-XSRF_"
#define SAP_XSRF_COOKIE_PREFIX @"SAP_SESSIONID_"


@implementation SDMConnectivityHelper

@synthesize username;
@synthesize password;
@synthesize delegate = m_delegate;
@synthesize sapClient;

- (id)initWithUsername:(NSString *)aUsername andPassword:(NSString *)aPassword
{
    if (self = [super init]) {
        self.username = aUsername;
        self.password = aPassword;
    }
    return self;
}

#pragma mark - Private methods

- (void)onBeforeRequestCall:(id <SDMRequesting>)aRequest
{
    if (m_delegate != nil && [m_delegate respondsToSelector:@selector(onBeforeSend:)]) {
        [m_delegate onBeforeSend:aRequest];
    }
}

- (id <SDMRequesting>)createRequestWithQuery:(ODataQuery *)aQuery
{
    if (isSUPMode) {
        [SDMRequestBuilder setRequestType:SUPRequestType];
    }
    else{
        [SDMRequestBuilder setRequestType:HTTPRequestType];
    }
    id <SDMRequesting> request = [SDMRequestBuilder requestWithURL:aQuery.URL];
    if (self.username && self.password) {
        request.username = self.username;
        request.password = self.password;
    }
    if ([self.sapClient length] > 0) {
        [request addRequestHeader:@"sap-client" value:self.sapClient];
    }
    return request;
}

- (void)addCSRFDataToRequest:(id <SDMRequesting>)request withCSRFData:(CSRFData *)aCSRFData
{
	if (aCSRFData) {
        [request addRequestHeader:X_CSRF_TOKEN value:aCSRFData.token];
        if (isSUPMode) {
            [request addRequestHeader:@"Cookie" value:aCSRFData.cookies];
        }
        else {
            [[request requestCookies] addObject:aCSRFData.cookie];
        }
    }
	else
	{
		NSString *method = request.requestMethod;
		if (![method isEqualToString:@"GET"]) {
			[request addRequestHeader:@"X-Requested-With" value:@"XMLHttpRequest"];
		}
	}
}

- (id <SDMRequesting>)createRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andMethod:(NSString *)aHttpMethod andCSRFData:(CSRFData *)aCSRFData
{
    id <SDMRequesting> request = [self createRequestWithQuery:aQuery];
    request.requestMethod = aHttpMethod;
    if (aBody.length > 0) {
        [request addRequestHeader:@"Content-Type" value:@"application/atom+xml"];
        NSMutableData *bodyData = [NSMutableData dataWithData:[aBody dataUsingEncoding:NSUTF8StringEncoding]];
        request.postBody = bodyData;
    }
    [self addCSRFDataToRequest:request withCSRFData:aCSRFData];
    return request;
}

#pragma mark - Execute Basic Request methods

- (id <SDMRequesting>)executeBasicSyncRequestWithQuery:(ODataQuery *)aQuery
{
    id <SDMRequesting> request = [self createRequestWithQuery:aQuery];
    [self onBeforeRequestCall:request];
    [request startSynchronous];
    return request; 
}

- (id <SDMRequesting>)executeBasicSyncRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andMethod:(NSString *)aHttpMethod andCSRFData:(CSRFData *)aCSRFData
{
    id <SDMRequesting> request = [self createRequestWithQuery:aQuery andBody:aBody andMethod:aHttpMethod andCSRFData:aCSRFData];
    [self onBeforeRequestCall:request];
    [request startSynchronous];
    return request; 
}

- (void)executeBasicAsyncRequestWithQuery:(ODataQuery *)aQuery andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate
{
    id <SDMRequesting> request = [self createRequestWithQuery:aQuery];
    [request setDelegate:aDelegate];
    [self onBeforeRequestCall:request];
    [request startAsynchronous];
}

- (void)executeBasicAsyncRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andMethod:(NSString *)aHttpMethod andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate
{
    id <SDMRequesting> request = [self createRequestWithQuery:aQuery andBody:aBody andMethod:aHttpMethod andCSRFData:aCSRFData];
    [request setDelegate:aDelegate];
    [self onBeforeRequestCall:request];
    [request startAsynchronous]; 
}

- (void)executeBasicAsyncRequestWithQuery:(ODataQuery *)aQuery andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
    id <SDMRequesting> request = [self createRequestWithQuery:aQuery];
    [request setDelegate:aDelegate];
    if (aFinishSelector) {
        request.didFinishSelector = aFinishSelector;
    }
    if (aUserInfo) {
        request.userInfo = aUserInfo;
    }
    [self onBeforeRequestCall:request];
    [request startAsynchronous];
}

- (void)executeBasicAsyncRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andMethod:(NSString *)aHttpMethod andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
    id <SDMRequesting> request = [self createRequestWithQuery:aQuery andBody:aBody andMethod:aHttpMethod andCSRFData:aCSRFData];
    [request setDelegate:aDelegate];
    if (aFinishSelector) {
        request.didFinishSelector = aFinishSelector;
    }
    if (aUserInfo) {
        request.userInfo = aUserInfo;
    }
    [self onBeforeRequestCall:request];
    [request startAsynchronous]; 
}

#pragma mark - Execute Create / Update / Delete Request methods

- (id <SDMRequesting>)executeCreateSyncRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andCSRFData:(CSRFData *)aCSRFData
{
    return [self executeBasicSyncRequestWithQuery:aQuery andBody:aBody andMethod:@"POST" andCSRFData:aCSRFData];
}

- (id <SDMRequesting>)executeUpdateSyncRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andCSRFData:(CSRFData *)aCSRFData
{
    return [self executeBasicSyncRequestWithQuery:aQuery andBody:aBody andMethod:@"PUT" andCSRFData:aCSRFData];
}

- (id <SDMRequesting>)executeDeleteSyncRequestWithQuery:(ODataQuery *)aQuery andCSRFData:(CSRFData *)aCSRFData
{
    return [self executeBasicSyncRequestWithQuery:aQuery andBody:nil andMethod:@"DELETE" andCSRFData:aCSRFData];
}

- (void)executeCreateAsyncRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
    [self executeBasicAsyncRequestWithQuery:aQuery andBody:aBody andMethod:@"POST" andCSRFData:aCSRFData andRequestDelegate:aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo];
}

- (void)executeUpdateAsyncRequestWithQuery:(ODataQuery *)aQuery andBody:(NSString *)aBody andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
    [self executeBasicAsyncRequestWithQuery:aQuery andBody:aBody andMethod:@"PUT" andCSRFData:aCSRFData andRequestDelegate:aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo];
}

- (void)executeDeleteAsyncRequestWithQuery:(ODataQuery *)aQuery andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
    [self executeBasicAsyncRequestWithQuery:aQuery andBody:nil andMethod:@"DELETE" andCSRFData:aCSRFData andRequestDelegate:aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo];
}

#pragma mark - Execute Create / Update / Delete Media Links methods

- (id <SDMRequesting>)executeCreateMediaLinkSyncRequest:(MediaLink *)aMediaLink andBody:(NSMutableData *)aBody andCSRFData:(CSRFData *)aCSRFData
{
	id <SDMRequesting> request = [self createRequestWithQuery:aMediaLink.mediaLinkQuery];
    request.requestMethod = @"POST";
	[request addRequestHeader:@"Content-Type" value:aMediaLink.contentType];
	[request addRequestHeader:@"Slug" value:aMediaLink.slug];
	request.postBody = aBody;
    [self addCSRFDataToRequest:request withCSRFData:aCSRFData];
    [self onBeforeRequestCall:request];
    [request startSynchronous];
    return request;
}

- (id <SDMRequesting>)executeUpdateMediaLinkSyncRequest:(MediaLink *)aMediaLink andBody:(NSMutableData *)aBody andCSRFData:(CSRFData *)aCSRFData
{
	id <SDMRequesting> request = [self createRequestWithQuery:aMediaLink.mediaLinkQuery];
    request.requestMethod = @"PUT";
	[request addRequestHeader:@"Content-Type" value:aMediaLink.contentType];
	request.postBody = aBody;
    [self addCSRFDataToRequest:request withCSRFData:aCSRFData];
    [self onBeforeRequestCall:request];
    [request startSynchronous];
    return request;
}

- (id <SDMRequesting>)executeDeleteMediaLinkSyncRequest:(MediaLink *)aMediaLink andCSRFData:(CSRFData *)aCSRFData
{
	return [self executeBasicSyncRequestWithQuery:aMediaLink.mediaLinkQuery andBody:nil andMethod:@"DELETE" andCSRFData:aCSRFData];
}

- (void)executeCreateMediaLinkAsyncRequest:(MediaLink *)aMediaLink andBody:(NSMutableData *)aBody andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
	id <SDMRequesting> request = [self createRequestWithQuery:aMediaLink.mediaLinkQuery];
	request.requestMethod = @"POST";
	[request addRequestHeader:@"Content-Type" value:aMediaLink.contentType];
	[request addRequestHeader:@"Slug" value:aMediaLink.slug];
	request.postBody = aBody;
    [self addCSRFDataToRequest:request withCSRFData:aCSRFData];
    [request setDelegate:aDelegate];
    if (aFinishSelector) {
        request.didFinishSelector = aFinishSelector;
    }
    if (aUserInfo) {
        request.userInfo = aUserInfo;
    }
    [self onBeforeRequestCall:request];
    [request startAsynchronous];
}

- (void)executeUpdateMediaLinkAsyncRequest:(MediaLink *)aMediaLink andBody:(NSMutableData *)aBody andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
	id <SDMRequesting> request = [self createRequestWithQuery:aMediaLink.mediaLinkQuery];
	request.requestMethod = @"PUT";
	[request addRequestHeader:@"Content-Type" value:aMediaLink.contentType];
	request.postBody = aBody;
    [self addCSRFDataToRequest:request withCSRFData:aCSRFData];
    [request setDelegate:aDelegate];
    if (aFinishSelector) {
        request.didFinishSelector = aFinishSelector;
    }
    if (aUserInfo) {
        request.userInfo = aUserInfo;
    }
    [self onBeforeRequestCall:request];
    [request startAsynchronous];
}

- (void)executeDeleteMediaLinkAsyncRequest:(MediaLink *)aMediaLink andCSRFData:(CSRFData *)aCSRFData andRequestDelegate:(__weak id <SDMHttpRequestDelegate>)aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo
{
	[self executeBasicAsyncRequestWithQuery:aMediaLink.mediaLinkQuery andBody:nil andMethod:@"DELETE" andCSRFData:aCSRFData andRequestDelegate:aDelegate andDidFinishSelector:(SEL)aFinishSelector andUserInfo:(NSDictionary *)aUserInfo];
}

#pragma mark - CSRF methods

- (CSRFData *)getCSRFDataForServiceQuery:(ODataQuery *)aServiceQuery
{
    id <SDMRequesting> request = [self createRequestWithQuery:aServiceQuery];
    [request addRequestHeader:@"X-Requested-With" value:@"XMLHttpRequest"];
    [request addRequestHeader:X_CSRF_TOKEN value:@"Fetch"];
    [request startSynchronous];
    
    CSRFData *csrfData = [[CSRFData alloc] init];
    
    csrfData.token = [[request responseHeaders] objectForKey:X_CSRF_TOKEN];
    if (isSUPMode) {
        NSString *cookiesString = [[request responseHeaders] objectForKey:@"SET-COOKIE"];
        if ([cookiesString rangeOfString:SAP_XSRF_COOKIE_PREFIX options:NSCaseInsensitiveSearch].location != NSNotFound) {
            csrfData.cookies = cookiesString;
        }
    }
    else {
        NSArray *cookies = request.responseCookies;
        for (NSHTTPCookie *aCookie in cookies) {
            if ([aCookie.name rangeOfString:SAP_XSRF_COOKIE_PREFIX options:NSCaseInsensitiveSearch].location != NSNotFound) {
                csrfData.cookie = aCookie;
                break;
            }
        }
        //if SAP XSRF cookie already exists in the request it will not be returned in the response.
        if (!csrfData.cookie) {
            NSArray *requestCookies = request.requestCookies;
            for (NSHTTPCookie *aCookie in requestCookies) {
                NSLog(aCookie.name);
                NSLog(aCookie.value);
                if ([aCookie.name rangeOfString:SAP_XSRF_COOKIE_PREFIX options:NSCaseInsensitiveSearch].location != NSNotFound) {
                    csrfData.cookie = aCookie;
                }
            }
        }
    }
    
    // if the CSRF cookie or CSRF Token is nil, the whole CSRF data is considered as invalid
    if (csrfData.token == nil || (csrfData.cookie == nil && csrfData.cookies == nil)) {
        return nil;
    }
    
    return csrfData;
}

- (void)addCSRFDataToRequest:(id <SDMRequesting>)aRequest andServiceQuery:(ODataQuery *)aServiceQuery
{
    CSRFData *csrfData = [self getCSRFDataForServiceQuery:aServiceQuery];
	[self addCSRFDataToRequest:aRequest withCSRFData:csrfData];
}

#pragma  mark - Methods for SUP Server connectivity

/**
 * Uncomment the following methods for SUP Server connectivity support
 */

//- (LiteSUPUserManager *)activateSUPModeWithHost:(NSString *)aSUPHost andSUPPort:(NSInteger)aSUPPort andSUPFarmId:(NSString *)aSUPFarmId andAppId:(NSString *)aAppId
//{
//    LiteSUPUserManager *supUserManager = [LiteSUPUserManager getInstance:aAppId];
//    [supUserManager setConnectionProfile:aSUPHost withSupPort:aSUPPort withServerFarmID:aSUPFarmId];
//    isSUPMode = YES;
//
//    return supUserManager;
//}
//
//- (LiteSUPUserManager *)activateSUPModeWithAppId:(NSString *)aAppId
//{
//    LiteSUPUserManager *supUserManager = [LiteSUPUserManager getInstance:aAppId];
//    isSUPMode = YES;
//    
//    return supUserManager;
//}
//
//- (void)registerSUPUser:(NSString *)aUsername andPassword:(NSString *)aPassword andSecurityConfigName:(NSString *)aSecurityConfigName andSUPUserManager:(LiteSUPUserManager *)aSUPUserManager
//{
//    if (![aSUPUserManager isUserRegistered]) {
//        [aSUPUserManager registerUser:aUsername withSecurityConfig:aSecurityConfigName withPassword:aPassword];
//        self.username = aUsername;
//        self.password = aPassword;
//    }
//}
//
//- (void)registerSUPUser:(NSString *)aUsername andPassword:(NSString *)aPassword andSecurityConfigName:(NSString *)aSecurityConfigName andVaultPassowrd:(NSString *)aVaultPassword andSUPUserManager:(LiteSUPUserManager *)aSUPUserManager
//{
//    if (![aSUPUserManager isUserRegistered]) {
//        [aSUPUserManager registerUser:aUsername withSecurityConfig:aSecurityConfigName withPassword:aPassword withVaultPassword:aVaultPassword];
//        self.username = aUsername;
//        self.password = aPassword;
//    }
//}
//
//- (void)unregisterSUPUser:(LiteSUPUserManager *)aSUPUserManager
//{
//    if ([aSUPUserManager isUserRegistered]) {
//        [aSUPUserManager deleteUser];
//        self.username = nil;
//        self.password = nil;
//    }
//}

#pragma mark 


@end
